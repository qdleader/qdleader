import{_ as a,c as s,a as n,o as t}from"./app-D8HvJIFE.js";const c={};function p(r,e){return t(),s("div",null,[...e[0]||(e[0]=[n(`<h1 id="fetch-的优缺点" tabindex="-1"><a class="header-anchor" href="#fetch-的优缺点"><span>fetch 的优缺点</span></a></h1><p>fetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多了，参数有点像jQuery ajax。但是，<strong>一定记住fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象。</strong></p><h2 id="fetch的优点" tabindex="-1"><a class="header-anchor" href="#fetch的优点"><span>fetch的优点：</span></a></h2><blockquote><p>1.符合关注分离，没有将输入、输出和用事件来跟踪的状态混杂在一个对象里 2.更好更方便的写法</p></blockquote><p>我认为fetch的优势主要优势就是：</p><ol><li>语法简洁，更加语义化</li><li>基于标准 Promise 实现，支持 async/await</li><li>同构方便，使用 <a href="https://github.com/matthew-andrews/isomorphic-fetch" target="_blank" rel="noopener noreferrer">isomorphic-fetch</a></li><li>更加底层，提供的API丰富（request, response）</li><li>脱离了XHR，是ES规范里新的实现方式</li></ol><h2 id="fetch-的缺点" tabindex="-1"><a class="header-anchor" href="#fetch-的缺点"><span>fetch 的缺点</span></a></h2><p>fetch是一个低层次的API，你可以把它考虑成原生的XHR，所以使用起来并不是那么舒服，需要进行封装。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&gt;</span> fetch只对网络请求报错，对<span class="token number">400</span>，<span class="token number">500</span>都当做成功的请求，服务器返回 <span class="token number">400</span>，<span class="token number">500</span> 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。</span>
<span class="line"><span class="token operator">&gt;</span> fetch默认不会带cookie，需要添加配置项： <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">&#39;include&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">&gt;</span> fetch不支持abort，不支持超时控制，使用setTimeout及Promise<span class="token punctuation">.</span>reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费</span>
<span class="line"><span class="token operator">&gt;</span> fetch没有办法原生监测请求的进度，而<span class="token constant">XHR</span>可以</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)])])}const l=a(c,[["render",p]]),i=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/js%E7%B1%BB/%E5%85%B6%E4%BB%96%E7%B1%BB/Q013-fetch%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9.html","title":"fetch 的优缺点","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"前端面试/js类/其他类/Q013-fetch的优缺点.md"}');export{l as comp,i as data};
