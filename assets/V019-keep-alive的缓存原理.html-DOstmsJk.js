import{_ as s,c as a,a as p,o as t}from"./app-D8HvJIFE.js";const e={};function o(c,n){return t(),a("div",null,[...n[0]||(n[0]=[p(`<h1 id="v018-watch的原理" tabindex="-1"><a class="header-anchor" href="#v018-watch的原理"><span>V018-watch的原理</span></a></h1><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;keep-alive&quot;</span><span class="token punctuation">,</span> </span>
<span class="line">     abstract<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 抽象组件属性 ,它在组件实例建立父子关系的时候会被忽略,发生在 initLifecycle 的过程中  </span></span>
<span class="line">    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>    </span>
<span class="line">        <span class="token literal-property property">include</span><span class="token operator">:</span> patternTypes<span class="token punctuation">,</span> <span class="token comment">// 被缓存组件    </span></span>
<span class="line">        <span class="token literal-property property">exclude</span><span class="token operator">:</span> patternTypes<span class="token punctuation">,</span> <span class="token comment">// 不被缓存组件    </span></span>
<span class="line">        <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span> <span class="token comment">// 指定缓存大小  </span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   </span>
<span class="line">          <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 缓存 </span></span>
<span class="line">          <span class="token keyword">this</span><span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 缓存的VNode的键  </span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span>  </span>
<span class="line">    <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    </span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      </span>
<span class="line">             <span class="token comment">// 删除所有缓存     </span></span>
<span class="line">             <span class="token function">pruneCacheEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>   </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    </span>
<span class="line">        <span class="token comment">// 监听缓存/不缓存组件   </span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">&quot;include&quot;</span><span class="token punctuation">,</span> val <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      </span>
<span class="line">            <span class="token function">pruneCache</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name <span class="token operator">=&gt;</span> <span class="token function">matches</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">&quot;exclude&quot;</span><span class="token punctuation">,</span> val <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      </span>
<span class="line">            <span class="token function">pruneCache</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token function">matches</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   </span>
<span class="line">        <span class="token comment">// 获取第一个子元素的 vnode   </span></span>
<span class="line">        <span class="token keyword">const</span> slot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>default<span class="token punctuation">;</span>    </span>
<span class="line">        <span class="token keyword">const</span> vnode<span class="token operator">:</span> VNode <span class="token operator">=</span> <span class="token function">getFirstComponentChild</span><span class="token punctuation">(</span>slot<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span>
<span class="line">        <span class="token keyword">const</span> componentOptions<span class="token operator">:</span> <span class="token operator">?</span>VNodeComponentOptions <span class="token operator">=</span> vnode <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>componentOptions<span class="token punctuation">;</span>    </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token parameter">componentOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      </span>
<span class="line">            <span class="token comment">// name不在inlcude中或者在exlude中 直接返回vnode      // check pattern      </span></span>
<span class="line">            <span class="token keyword">const</span> name<span class="token operator">:</span> <span class="token operator">?</span>string <span class="token operator">=</span> <span class="token function">getComponentName</span><span class="token punctuation">(</span>componentOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line">            <span class="token keyword">const</span> <span class="token punctuation">{</span> include<span class="token punctuation">,</span> exclude <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>     </span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>        </span>
<span class="line">            <span class="token comment">// not included       </span></span>
<span class="line">             <span class="token punctuation">(</span>include <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>name <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">matches</span><span class="token punctuation">(</span>include<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>        </span>
<span class="line">            <span class="token comment">// excluded        </span></span>
<span class="line">             <span class="token punctuation">(</span>exclude <span class="token operator">&amp;&amp;</span> name <span class="token operator">&amp;&amp;</span> <span class="token function">matches</span><span class="token punctuation">(</span>exclude<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>      </span>
<span class="line">                  <span class="token keyword">return</span> vnode<span class="token punctuation">;</span>      </span>
<span class="line">            <span class="token punctuation">}</span>      </span>
<span class="line">            <span class="token keyword">const</span> <span class="token punctuation">{</span> cache<span class="token punctuation">,</span> keys <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token comment">// 获取键，优先获取组件的name字段，否则是组件的tag     </span></span>
<span class="line">            <span class="token keyword">const</span> key<span class="token operator">:</span> <span class="token operator">?</span>string <span class="token operator">=</span>        </span>
<span class="line">            vnode<span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token keyword">null</span> </span>
<span class="line">            <span class="token operator">?</span> componentOptions<span class="token punctuation">.</span>Ctor<span class="token punctuation">.</span>cid <span class="token operator">+</span> <span class="token punctuation">(</span>componentOptions<span class="token punctuation">.</span>tag <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">::</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>componentOptions<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>          </span>
<span class="line">            <span class="token operator">:</span> vnode<span class="token punctuation">.</span>key<span class="token punctuation">;</span>      </span>
<span class="line">            <span class="token comment">// 命中缓存,直接从缓存拿vnode 的组件实例,并且重新调整了 key 的顺序放在了最后一个      </span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token parameter">cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        </span>
<span class="line">                vnode<span class="token punctuation">.</span>componentInstance <span class="token operator">=</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>componentInstance<span class="token punctuation">;</span>        </span>
<span class="line">                <span class="token comment">// make current key freshest       </span></span>
<span class="line">                <span class="token function">remove</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span>
<span class="line">                keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line">            <span class="token punctuation">}</span>     </span>
<span class="line">            <span class="token comment">// 不命中缓存,把 vnode 设置进缓存      </span></span>
<span class="line">            <span class="token keyword">else</span> <span class="token punctuation">{</span> </span>
<span class="line">                cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> vnode<span class="token punctuation">;</span>        </span>
<span class="line">                keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span>
<span class="line">            <span class="token comment">// prune oldest entry        </span></span>
<span class="line">            <span class="token comment">// 如果配置了 max 并且缓存的长度超过了 this.max，还要从缓存中删除第一个        </span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token punctuation">.</span>max <span class="token operator">&amp;&amp;</span> keys<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>max<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        </span>
<span class="line">                  <span class="token function">pruneCacheEntry</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> keys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> keys<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span>
<span class="line">            <span class="token punctuation">}</span>      </span>
<span class="line">        <span class="token punctuation">}</span>      </span>
<span class="line">        <span class="token comment">// keepAlive标记位      </span></span>
<span class="line">        vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>keepAlive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   </span>
<span class="line">    <span class="token punctuation">}</span>   </span>
<span class="line">    <span class="token keyword">return</span> vnode <span class="token operator">||</span> <span class="token punctuation">(</span>slot <span class="token operator">&amp;&amp;</span> slot<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><blockquote><p>获取 keep-alive 包裹着的第一个子组件对象及其组件名 根据设定的 include/exclude（如果有）进行条件匹配,决定是否缓存。不匹配,直接返回组件实例</p></blockquote><blockquote><p>根据组件 ID 和 tag 生成缓存 Key,并在缓存对象中查找是否已缓存过该组件实例。如果存在,直接取出缓存值并更新该 key 在 this.keys 中的位置(更新 key 的位置是实现 LRU 置换策略的关键)</p></blockquote><blockquote><p>在 this.cache 对象中存储该组件实例并保存 key 值,之后检查缓存的实例数量是否超过 max 的设置值,超过则根据 LRU 置换策略删除最近最久未使用的实例（即是下标为 0 的那个 key）</p></blockquote><blockquote><p>最后组件实例的 keepAlive 属性设置为 true,这个在渲染和执行被包裹组件的钩子函数会用到</p></blockquote><h4 id="lru-缓存淘汰算法" tabindex="-1"><a class="header-anchor" href="#lru-缓存淘汰算法"><span>LRU 缓存淘汰算法</span></a></h4><p>LRU（Least recently used）算法根据数据的历史访问记录来进行淘汰数据,其核心思想是“如果数据最近被访问过,那么将来被访问的几率也更高”。 LRU keep-alive 的实现正是用到了 LRU 策略,将最近访问的组件 push 到 this.keys 最后面,this.keys[0]也就是最久没被访问的组件,当缓存实例超过 max 设置值,删除 this.keys[0]</p>`,9)])])}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/vue%E7%AF%87/V019-keep-alive%E7%9A%84%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86.html","title":"V018-watch的原理","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"前端面试/vue篇/V019-keep-alive的缓存原理.md"}');export{i as comp,u as data};
