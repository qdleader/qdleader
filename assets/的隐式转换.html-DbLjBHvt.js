import{_ as a,c as n,a as e,o as t}from"./app-D8HvJIFE.js";const p={};function l(i,s){return t(),n("div",null,[...s[0]||(s[0]=[e(`<h1 id="的隐式转换" tabindex="-1"><a class="header-anchor" href="#的隐式转换"><span>==的隐式转换</span></a></h1><p>类型相同的比较：</p><h2 id="_1-如果类型是-undefined-或-null-返回-true。" tabindex="-1"><a class="header-anchor" href="#_1-如果类型是-undefined-或-null-返回-true。"><span>（1）如果类型是 Undefined 或 Null，返回 true。</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_2-如果一个是-0-另一个是-0-返回-true" tabindex="-1"><a class="header-anchor" href="#_2-如果一个是-0-另一个是-0-返回-true"><span>（2）如果一个是 +0，另一个是 -0，返回 true：</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">+</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_3-如果类型是对象-二者引用同一个对象-返回-true-反之返回-false。" tabindex="-1"><a class="header-anchor" href="#_3-如果类型是对象-二者引用同一个对象-返回-true-反之返回-false。"><span>（3）如果类型是对象，二者引用同一个对象，返回 true，反之返回 false。</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>null 和 undefined 比较： 仅当它们之间的比较时，返回 true。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>NaN 比较： NaN 与任何值比较都返回 false，包括NaN自己。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span>   <span class="token comment">// false</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串与数字比较： 如果其中一个操作数是字符串，另一个是数字，将字符串转换为数字，然后进行比较。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token string">&#39;5&#39;</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">// true，将字符串 &#39;5&#39; 转换为数字 5 进行比较</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>布尔值与非布尔值比较： 布尔值无法直接比较，需先将布尔值转换为数字（true 转换为 1，false 转换为 0），非布尔值也需要转换成数字再比较。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// true，将布尔值 true 转换为数字 1 进行比较</span></span>
<span class="line"><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span> <span class="token comment">// false，将布尔值 false 转换为数字 0 ，将字符串 &#39;123&#39; 转换为数字 123 进行比较</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>对象与原始类型比较： 如果其中一个是对象，另一个是原始类型，将对象通过 ToPrimitive 转换为原始类型，然后进行比较。（即如果原始类型为字符串，则对象转换成字符串再比较；如果原始类为布尔值，则将布尔值与对象都转换成数字进行比较；如果原始类为数字，则将对象转换成数字进行比较。）</p><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>ToPrimitive 在我的上篇文章（看了一天的官方文档，终于搞懂了 JS 类型转换机制）中详细介绍过，这里我们直接当做公式套用。</p><p>ToPrimitive(obj, Number) ==&gt; Number({})</p><p>如果 obj 是基本类型，直接返回 否则，调用 valueOf 方法，如果得到原始值，则返回 否则，调用 toString 方法，如果得到原始值，则返回 否则，报错</p><p>首先{}先被ToPrimitive转换成字符串&quot;[object Object]&quot;，就相当于直接判断 &quot;[object Object]&quot; == 1，字符串与数字的比较中，又要将字符串转换成数字，&quot;[object Object]&quot;转换成数字为 NaN，而NaN 与任何值比较都为 false。 所以 {} == 1 返回 false。</p>`,23)])])}const c=a(p,[["render",l]]),o=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/js%E7%B1%BB/%E5%8F%98%E9%87%8F%E7%B1%BB/%E7%9A%84%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2.html","title":"==的隐式转换","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"前端面试/js类/变量类/==的隐式转换.md"}');export{c as comp,o as data};
