import{_ as s,c as a,a as e,o as t}from"./app-D8HvJIFE.js";const p={};function o(i,n){return t(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="vue-开发" tabindex="-1"><a class="header-anchor" href="#vue-开发"><span>vue 开发</span></a></h1><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"><span class="token literal-property property">description</span><span class="token operator">:</span> Comprehensive guidelines <span class="token keyword">for</span> Vue<span class="token punctuation">.</span>js development<span class="token punctuation">,</span> covering code structure<span class="token punctuation">,</span> performance<span class="token punctuation">,</span> security<span class="token punctuation">,</span> testing<span class="token punctuation">,</span> and tooling best practices<span class="token punctuation">.</span> This rule provides actionable guidance to enhance code quality<span class="token punctuation">,</span> maintainability<span class="token punctuation">,</span> and developer productivity <span class="token keyword">in</span> Vue<span class="token punctuation">.</span>js projects<span class="token punctuation">.</span></span>
<span class="line"><span class="token literal-property property">globs</span><span class="token operator">:</span> <span class="token operator">*</span><span class="token punctuation">.</span>vue<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">.</span>js<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">.</span>ts</span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"># Vue<span class="token punctuation">.</span>js Best Practices and Coding Standards</span>
<span class="line"></span>
<span class="line">This document outlines best practices <span class="token keyword">for</span> Vue<span class="token punctuation">.</span>js development<span class="token punctuation">,</span> covering various aspects to ensure high<span class="token operator">-</span>quality<span class="token punctuation">,</span> maintainable<span class="token punctuation">,</span> and performant code<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">## <span class="token number">1.</span> Code Organization and Structure</span>
<span class="line"></span>
<span class="line">### <span class="token number">1.1</span><span class="token punctuation">.</span> Directory Structure</span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Component<span class="token operator">-</span>Based Structure<span class="token operator">:</span><span class="token operator">**</span> Organize components into logical folders based on their functionality or feature<span class="token punctuation">.</span> This improves code readability and maintainability<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">    src<span class="token operator">/</span></span>
<span class="line">    ├── components<span class="token operator">/</span></span>
<span class="line">    │   ├── Button<span class="token operator">/</span></span>
<span class="line">    │   │   ├── Button<span class="token punctuation">.</span>vue</span>
<span class="line">    │   │   └── Button<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>js</span>
<span class="line">    │   ├── Input<span class="token operator">/</span></span>
<span class="line">    │   │   ├── Input<span class="token punctuation">.</span>vue</span>
<span class="line">    │   │   └── Input<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>js</span>
<span class="line">    │   └── <span class="token operator">...</span></span>
<span class="line">    ├── views<span class="token operator">/</span></span>
<span class="line">    │   ├── Home<span class="token punctuation">.</span>vue</span>
<span class="line">    │   ├── About<span class="token punctuation">.</span>vue</span>
<span class="line">    │   └── <span class="token operator">...</span></span>
<span class="line">    ├── services<span class="token operator">/</span></span>
<span class="line">    │   ├── api<span class="token punctuation">.</span>js</span>
<span class="line">    │   └── auth<span class="token punctuation">.</span>js</span>
<span class="line">    ├── store<span class="token operator">/</span></span>
<span class="line">    │   ├── index<span class="token punctuation">.</span>js  # Vuex store</span>
<span class="line">    │   ├── modules<span class="token operator">/</span></span>
<span class="line">    │   │   ├── user<span class="token punctuation">.</span>js</span>
<span class="line">    │   │   └── <span class="token operator">...</span></span>
<span class="line">    ├── App<span class="token punctuation">.</span>vue</span>
<span class="line">    └── main<span class="token punctuation">.</span>js</span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Feature<span class="token operator">-</span>Based Structure<span class="token operator">:</span><span class="token operator">**</span> Alternatively<span class="token punctuation">,</span> organize files by feature<span class="token punctuation">,</span> grouping components<span class="token punctuation">,</span> routes<span class="token punctuation">,</span> and store modules related to a specific feature<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">    src<span class="token operator">/</span></span>
<span class="line">    ├── features<span class="token operator">/</span></span>
<span class="line">    │   ├── user<span class="token operator">-</span>profile<span class="token operator">/</span></span>
<span class="line">    │   │   ├── components<span class="token operator">/</span></span>
<span class="line">    │   │   │   ├── UserProfile<span class="token punctuation">.</span>vue</span>
<span class="line">    │   │   │   └── <span class="token operator">...</span></span>
<span class="line">    │   │   ├── routes<span class="token punctuation">.</span>js</span>
<span class="line">    │   │   ├── store<span class="token punctuation">.</span>js</span>
<span class="line">    │   │   └── <span class="token operator">...</span></span>
<span class="line">    │   ├── shopping<span class="token operator">-</span>cart<span class="token operator">/</span></span>
<span class="line">    │   │   ├── <span class="token operator">...</span></span>
<span class="line">    │   └── <span class="token operator">...</span></span>
<span class="line">    ├── App<span class="token punctuation">.</span>vue</span>
<span class="line">    └── main<span class="token punctuation">.</span>js</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">### <span class="token number">1.2</span><span class="token punctuation">.</span> File Naming Conventions</span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Component Files<span class="token operator">:</span><span class="token operator">**</span> Use PascalCase <span class="token keyword">for</span> component file <span class="token function">names</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>g<span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">MyComponent.vue</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Other Files<span class="token operator">:</span><span class="token operator">**</span> Use camelCase or kebab<span class="token operator">-</span><span class="token keyword">case</span> <span class="token keyword">for</span> other JavaScript<span class="token operator">/</span>TypeScript <span class="token function">files</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>g<span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apiService.js</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">my-helper.js</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Consistency<span class="token operator">:</span><span class="token operator">**</span> Maintain a consistent naming convention throughout the project<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">### <span class="token number">1.3</span><span class="token punctuation">.</span> Module Organization</span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span><span class="token constant">ES</span> <span class="token literal-property property">Modules</span><span class="token operator">:</span><span class="token operator">**</span> Utilize <span class="token constant">ES</span> <span class="token function">modules</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">import</span><span class="token template-punctuation string">\`</span></span><span class="token operator">/</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">export</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">for</span> modular code organization<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Single Responsibility Principle<span class="token operator">:</span><span class="token operator">**</span> Each module should have a single<span class="token punctuation">,</span> well<span class="token operator">-</span>defined responsibility<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Avoid Circular Dependencies<span class="token operator">:</span><span class="token operator">**</span> Prevent circular dependencies between modules to avoid unexpected behavior and improve maintainability<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">### <span class="token number">1.4</span><span class="token punctuation">.</span> Component Architecture</span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Component Composition<span class="token operator">:</span><span class="token operator">**</span> Favor component composition over inheritance <span class="token keyword">for</span> increased flexibility and reusability<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Presentational and Container Components<span class="token operator">:</span><span class="token operator">**</span> Separate <span class="token function">presentational</span> <span class="token punctuation">(</span>dumb<span class="token punctuation">)</span> components from <span class="token function">container</span> <span class="token punctuation">(</span>smart<span class="token punctuation">)</span> components<span class="token punctuation">.</span> Presentational components focus on rendering <span class="token constant">UI</span><span class="token punctuation">,</span> <span class="token keyword">while</span> container components handle data fetching and logic<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Single File <span class="token function">Components</span> <span class="token punctuation">(</span>SFCs<span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">**</span> Leverage Vue&#39;s SFCs <span class="token keyword">for</span> encapsulating component logic<span class="token punctuation">,</span> template<span class="token punctuation">,</span> and styling<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">### <span class="token number">1.5</span><span class="token punctuation">.</span> Code Splitting Strategies</span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Route<span class="token operator">-</span>Based Splitting<span class="token operator">:</span><span class="token operator">**</span> Use dynamic imports and Vue&#39;s <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">async</span><span class="token template-punctuation string">\`</span></span> component feature to split the application into chunks based on routes<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Component<span class="token operator">-</span>Based Splitting<span class="token operator">:</span><span class="token operator">**</span> Split large components into smaller<span class="token punctuation">,</span> lazy<span class="token operator">-</span>loaded components to improve initial load time<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Vendor Splitting<span class="token operator">:</span><span class="token operator">**</span> Separate vendor dependencies into a separate chunk to allow <span class="token keyword">for</span> browser caching and prevent unnecessary reloads<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">## <span class="token number">2.</span> Common Patterns and Anti<span class="token operator">-</span>patterns</span>
<span class="line"></span>
<span class="line">### <span class="token number">2.1</span><span class="token punctuation">.</span> Design Patterns Specific to Vue</span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Provide<span class="token operator">/</span>Inject<span class="token operator">:</span><span class="token operator">**</span> Use <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">provide</span><span class="token template-punctuation string">\`</span></span> and <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">inject</span><span class="token template-punctuation string">\`</span></span> <span class="token keyword">for</span> dependency injection between components<span class="token punctuation">,</span> especially when dealing <span class="token keyword">with</span> deeply nested components<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Renderless Components<span class="token operator">:</span><span class="token operator">**</span> Create renderless components that encapsulate logic and provide data to be rendered by slot<span class="token operator">-</span>using components<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Higher<span class="token operator">-</span>Order <span class="token function">Components</span> <span class="token punctuation">(</span>HOCs<span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">**</span> Use HOCs to reuse component logic or add functionality to existing components<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">### <span class="token number">2.2</span><span class="token punctuation">.</span> Recommended Approaches <span class="token keyword">for</span> Common Tasks</span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Form Handling<span class="token operator">:</span><span class="token operator">**</span> Use <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">v-model</span><span class="token template-punctuation string">\`</span></span> <span class="token keyword">for</span> two<span class="token operator">-</span>way data binding <span class="token keyword">in</span> forms<span class="token punctuation">.</span> Consider using a form validation library like Vuelidate or VeeValidate <span class="token keyword">for</span> robust form validation<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span><span class="token constant">API</span> <span class="token literal-property property">Requests</span><span class="token operator">:</span><span class="token operator">**</span> Use a dedicated service module <span class="token keyword">for</span> handling <span class="token constant">API</span> requests<span class="token punctuation">.</span> Use <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">async/await</span><span class="token template-punctuation string">\`</span></span> <span class="token keyword">for</span> cleaner asynchronous code<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>State Management<span class="token operator">:</span><span class="token operator">**</span> Utilize Vuex <span class="token keyword">for</span> centralized state management <span class="token keyword">in</span> larger applications<span class="token punctuation">.</span> For simpler applications<span class="token punctuation">,</span> consider using Vue&#39;s reactivity system directly or a lightweight state management solution like Pinia<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Event Handling<span class="token operator">:</span><span class="token operator">**</span> Use component <span class="token function">events</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">$emit</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">for</span> communication between parent and child components<span class="token punctuation">.</span> For communication between unrelated components<span class="token punctuation">,</span> use a global event <span class="token function">bus</span> <span class="token punctuation">(</span><span class="token keyword">with</span> caution<span class="token punctuation">)</span> or a state management solution<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">### <span class="token number">2.3</span><span class="token punctuation">.</span> Anti<span class="token operator">-</span>patterns and Code Smells to Avoid</span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Mutating Props Directly<span class="token operator">:</span><span class="token operator">**</span> Avoid mutating props directly within a component<span class="token punctuation">.</span> Instead<span class="token punctuation">,</span> emit an event to the parent component to update the prop value<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Overusing Global State<span class="token operator">:</span><span class="token operator">**</span> Avoid storing too much data <span class="token keyword">in</span> global state<span class="token punctuation">.</span> Use local component state whenever possible<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Direct <span class="token constant">DOM</span> <span class="token literal-property property">Manipulation</span><span class="token operator">:</span><span class="token operator">**</span> Avoid directly manipulating the <span class="token constant">DOM</span> using <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">document</span><span class="token template-punctuation string">\`</span></span> APIs<span class="token punctuation">.</span> Use Vue&#39;s template directives and component APIs to update the <span class="token constant">DOM</span> reactively<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Magic Numbers and Strings<span class="token operator">:</span><span class="token operator">**</span> Avoid using magic numbers and strings directly <span class="token keyword">in</span> the code<span class="token punctuation">.</span> Use constants to improve readability and maintainability<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Complex Computed Properties<span class="token operator">:</span><span class="token operator">**</span> Keep computed properties simple and focused<span class="token punctuation">.</span> Complex computations should be moved to methods or utility functions<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">### <span class="token number">2.4</span><span class="token punctuation">.</span> State Management Best Practices</span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Single Source <span class="token keyword">of</span> <span class="token literal-property property">Truth</span><span class="token operator">:</span><span class="token operator">**</span> Maintain a single source <span class="token keyword">of</span> truth <span class="token keyword">for</span> application state using Vuex or Pinia<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Mutations <span class="token keyword">for</span> State Updates<span class="token operator">:</span><span class="token operator">**</span> Only use mutations to update the state <span class="token keyword">in</span> Vuex<span class="token punctuation">.</span> Mutations should be synchronous and atomic<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Actions <span class="token keyword">for</span> Asynchronous Operations<span class="token operator">:</span><span class="token operator">**</span> Use actions to handle asynchronous operations like <span class="token constant">API</span> requests<span class="token punctuation">.</span> Actions can commit mutations to update the state<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Getters <span class="token keyword">for</span> Derived State<span class="token operator">:</span><span class="token operator">**</span> Use getters to derive state from the store<span class="token punctuation">.</span> Getters should be pure functions and should not modify the state<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Modularity<span class="token operator">:</span><span class="token operator">**</span> Organize the store into modules to improve maintainability and scalability<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">### <span class="token number">2.5</span><span class="token punctuation">.</span> Error Handling Patterns</span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Centralized Error Handling<span class="token operator">:</span><span class="token operator">**</span> Implement a centralized error handling mechanism to catch and log errors consistently<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Error Boundary Components<span class="token operator">:</span><span class="token operator">**</span> Use error boundary components to catch errors within specific parts <span class="token keyword">of</span> the application and prevent crashes<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>User<span class="token operator">-</span>Friendly Error Messages<span class="token operator">:</span><span class="token operator">**</span> Provide user<span class="token operator">-</span>friendly error messages to guide users when errors occur<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Logging<span class="token operator">:</span><span class="token operator">**</span> Log errors to a server or error tracking service <span class="token keyword">for</span> monitoring and debugging<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Try<span class="token operator">-</span>Catch Blocks<span class="token operator">:</span><span class="token operator">**</span> Use <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">try-catch</span><span class="token template-punctuation string">\`</span></span> blocks to handle potential errors <span class="token keyword">in</span> asynchronous operations or complex computations<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">## <span class="token number">3.</span> Performance Considerations</span>
<span class="line"></span>
<span class="line">### <span class="token number">3.1</span><span class="token punctuation">.</span> Optimization Techniques</span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Virtual <span class="token constant">DOM</span> <span class="token literal-property property">Optimization</span><span class="token operator">:</span><span class="token operator">**</span> Vue&#39;s virtual <span class="token constant">DOM</span> implementation is already highly optimized<span class="token punctuation">,</span> but avoid unnecessary re<span class="token operator">-</span>renders by using <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">v-if</span><span class="token template-punctuation string">\`</span></span> instead <span class="token keyword">of</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">v-show</span><span class="token template-punctuation string">\`</span></span> when elements are rarely displayed<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Computed Properties and Watchers<span class="token operator">:</span><span class="token operator">**</span> Use computed properties and watchers judiciously<span class="token punctuation">.</span> Avoid performing expensive computations <span class="token keyword">in</span> computed properties that are frequently re<span class="token operator">-</span>evaluated<span class="token punctuation">.</span> Debounce or throttle watchers to limit the number <span class="token keyword">of</span> updates<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>List Rendering Optimization<span class="token operator">:</span><span class="token operator">**</span> Use the <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">:key</span><span class="token template-punctuation string">\`</span></span> attribute when rendering lists <span class="token keyword">with</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">v-for</span><span class="token template-punctuation string">\`</span></span> to help Vue track changes efficiently<span class="token punctuation">.</span>  Ensure the keys are unique and stable<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Functional Components<span class="token operator">:</span><span class="token operator">**</span> Use functional components <span class="token keyword">for</span> simple<span class="token punctuation">,</span> stateless components to improve rendering performance<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Avoid Inline Templates<span class="token operator">:</span><span class="token operator">**</span>  Use pre<span class="token operator">-</span>compiled templates <span class="token keyword">in</span> single<span class="token operator">-</span>file components instead <span class="token keyword">of</span> inline <span class="token function">templates</span> <span class="token punctuation">(</span>using <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;script type=&quot;text/x-template&quot;&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">for</span> better performance<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">### <span class="token number">3.2</span><span class="token punctuation">.</span> Memory Management</span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Remove Event Listeners<span class="token operator">:</span><span class="token operator">**</span>  When a component is destroyed<span class="token punctuation">,</span> remove any event listeners that were added <span class="token function">manually</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>g<span class="token punctuation">.</span><span class="token punctuation">,</span> using <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">addEventListener</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Unsubscribe from Observables<span class="token operator">:</span><span class="token operator">**</span>  If using RxJS or other observable libraries<span class="token punctuation">,</span> unsubscribe from observables when the component is destroyed to prevent memory leaks<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Release References<span class="token operator">:</span><span class="token operator">**</span>  Release references to large objects or data structures when they are no longer needed to allow the garbage collector to reclaim memory<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">### <span class="token number">3.3</span><span class="token punctuation">.</span> Rendering Optimization</span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Asynchronous Updates<span class="token operator">:</span><span class="token operator">**</span>  Use <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Vue.nextTick()</span><span class="token template-punctuation string">\`</span></span> or <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">setTimeout()</span><span class="token template-punctuation string">\`</span></span> to defer updates that are not immediately needed<span class="token punctuation">,</span> allowing the browser to complete rendering tasks<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Debouncing and Throttling<span class="token operator">:</span><span class="token operator">**</span>  Debounce or throttle event handlers that trigger frequent updates to prevent excessive re<span class="token operator">-</span>renders<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">v-once</span><span class="token template-punctuation string">\`</span></span> <span class="token literal-property property">Directive</span><span class="token operator">:</span><span class="token operator">**</span>  Use the <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">v-once</span><span class="token template-punctuation string">\`</span></span> directive <span class="token keyword">for</span> elements that will never change to improve rendering performance<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Avoid Deeply Nested Components<span class="token operator">:</span><span class="token operator">**</span>  Deeply nested component hierarchies can impact rendering performance<span class="token punctuation">.</span> Consider flattening the hierarchy or using techniques like scoped slots to optimize rendering<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">### <span class="token number">3.4</span><span class="token punctuation">.</span> Bundle Size Optimization</span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Code Splitting<span class="token operator">:</span><span class="token operator">**</span> Implement code splitting to reduce the initial bundle size and improve loading time<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Tree Shaking<span class="token operator">:</span><span class="token operator">**</span>  Use a modern build tool like Webpack or Rollup to perform tree shaking and remove unused code from the final bundle<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Minification and Compression<span class="token operator">:</span><span class="token operator">**</span>  Minify and compress the code to reduce the bundle size<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Image Optimization<span class="token operator">:</span><span class="token operator">**</span>  Optimize images by compressing them and using appropriate <span class="token function">formats</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>g<span class="token punctuation">.</span><span class="token punctuation">,</span> WebP<span class="token punctuation">)</span> to reduce file sizes<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Lazy Loading<span class="token operator">:</span><span class="token operator">**</span>  Lazy load images<span class="token punctuation">,</span> components<span class="token punctuation">,</span> and other resources to improve initial load time<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">### <span class="token number">3.5</span><span class="token punctuation">.</span> Lazy Loading Strategies</span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Lazy Loading Components<span class="token operator">:</span><span class="token operator">**</span> Use dynamic imports to lazy load components only when they are needed<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Lazy Loading Images<span class="token operator">:</span><span class="token operator">**</span> Use a lazy loading library to load images only when they are visible <span class="token keyword">in</span> the viewport<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Lazy Loading Routes<span class="token operator">:</span><span class="token operator">**</span> Lazy load routes using Vue Router<span class="token string">&#39;s \`component: () =&gt; import(&#39;</span><span class="token punctuation">.</span><span class="token operator">/</span>MyComponent<span class="token punctuation">.</span>vue&#39;<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> syntax.</span>
<span class="line"></span>
<span class="line">## 4. Security Best Practices</span>
<span class="line"></span>
<span class="line">### 4.1. Common Vulnerabilities and How to Prevent Them</span>
<span class="line"></span>
<span class="line">*   **Cross-Site Scripting (XSS):** Prevent XSS attacks by sanitizing user input and using Vue&#39;s built-in template directives, which automatically escape HTML entities.</span>
<span class="line">*   **Cross-Site Request Forgery (CSRF):** Protect against CSRF attacks by implementing CSRF tokens in forms and API requests.</span>
<span class="line">*   **SQL Injection:** Prevent SQL injection attacks by using parameterized queries or an ORM with built-in protection.</span>
<span class="line">*   **Man-in-the-Middle (MitM) Attacks:** Use HTTPS to encrypt communication between the client and server and protect against MitM attacks.</span>
<span class="line">*   **Clickjacking:** Prevent clickjacking attacks by setting the </span><span class="token template-punctuation string">\`</span></span><span class="token constant">X</span><span class="token operator">-</span>Frame<span class="token operator">-</span>Options<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> header to </span><span class="token template-punctuation string">\`</span></span><span class="token constant">DENY</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> or </span><span class="token template-punctuation string">\`</span></span><span class="token constant">SAMEORIGIN</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">.</span>
<span class="line"></span>
<span class="line">### 4.2. Input Validation</span>
<span class="line"></span>
<span class="line">*   **Server-Side Validation:** Always perform server-side validation to ensure data integrity and prevent malicious input.</span>
<span class="line">*   **Client-Side Validation:** Implement client-side validation to provide immediate feedback to users and reduce server load. Use libraries like Vuelidate or VeeValidate.</span>
<span class="line">*   **Sanitization:** Sanitize user input to remove potentially harmful characters or code.</span>
<span class="line"></span>
<span class="line">### 4.3. Authentication and Authorization Patterns</span>
<span class="line"></span>
<span class="line">*   **JSON Web Tokens (JWT):** Use JWTs for authentication and authorization. Store JWTs securely in the client-side (e.g., using HTTP-only cookies or local storage with encryption).</span>
<span class="line">*   **Role-Based Access Control (RBAC):** Implement RBAC to control access to different parts of the application based on user roles.</span>
<span class="line">*   **OAuth 2.0:** Use OAuth 2.0 for third-party authentication and authorization.</span>
<span class="line">*   **Secure Password Storage:** Store passwords securely using a strong hashing algorithm like bcrypt or Argon2.</span>
<span class="line"></span>
<span class="line">### 4.4. Data Protection Strategies</span>
<span class="line"></span>
<span class="line">*   **Encryption:** Encrypt sensitive data both in transit and at rest.</span>
<span class="line">*   **Data Masking:** Mask sensitive data in the UI to prevent unauthorized access.</span>
<span class="line">*   **Data Minimization:** Collect only the necessary data and avoid storing sensitive data unnecessarily.</span>
<span class="line">*   **Regular Security Audits:** Conduct regular security audits to identify and address potential vulnerabilities.</span>
<span class="line"></span>
<span class="line">### 4.5. Secure API Communication</span>
<span class="line"></span>
<span class="line">*   **HTTPS:** Use HTTPS for all API communication.</span>
<span class="line">*   **API Authentication:** Implement authentication for all API endpoints using JWTs or other authentication mechanisms.</span>
<span class="line">*   **Rate Limiting:** Implement rate limiting to prevent abuse and denial-of-service attacks.</span>
<span class="line">*   **Input Validation:** Validate all API input to prevent injection attacks.</span>
<span class="line">*   **Output Encoding:** Encode API output to prevent XSS attacks.</span>
<span class="line"></span>
<span class="line">## 5. Testing Approaches</span>
<span class="line"></span>
<span class="line">### 5.1. Unit Testing Strategies</span>
<span class="line"></span>
<span class="line">*   **Component Testing:** Write unit tests for individual Vue components to verify their behavior in isolation. Use a testing library like Jest or Mocha with Vue Test Utils.</span>
<span class="line">*   **Function Testing:** Write unit tests for utility functions and other non-component code.</span>
<span class="line">*   **Test-Driven Development (TDD):** Consider using TDD to write tests before writing the code.</span>
<span class="line"></span>
<span class="line">### 5.2. Integration Testing</span>
<span class="line"></span>
<span class="line">*   **Component Integration:** Write integration tests to verify the interaction between multiple components.</span>
<span class="line">*   **Module Integration:** Write integration tests to verify the interaction between different modules of the application.</span>
<span class="line">*   **End-to-End Integration:** Write end-to-end integration tests to verify the entire application flow from the user&#39;s perspective. Tools like Cypress, Playwright, or Selenium can be used for E2E testing.</span>
<span class="line"></span>
<span class="line">### 5.3. End-to-End Testing</span>
<span class="line"></span>
<span class="line">*   **User Flow Testing:** Simulate user flows to test the application&#39;s functionality from end to end.</span>
<span class="line">*   **Visual Regression Testing:** Use visual regression testing to detect unintended visual changes in the UI.</span>
<span class="line">*   **Accessibility Testing:** Test the application&#39;s accessibility to ensure it is usable by people with disabilities.</span>
<span class="line"></span>
<span class="line">### 5.4. Test Organization</span>
<span class="line"></span>
<span class="line">*   **Test Suites:** Organize tests into suites based on the component or module being tested.</span>
<span class="line">*   **Test Cases:** Write clear and concise test cases with descriptive names.</span>
<span class="line">*   **Arrange-Act-Assert:** Follow the Arrange-Act-Assert pattern in each test case.</span>
<span class="line"></span>
<span class="line">### 5.5. Mocking and Stubbing</span>
<span class="line"></span>
<span class="line">*   **Mock Dependencies:** Mock external dependencies like API services or third-party libraries to isolate the code being tested.</span>
<span class="line">*   **Stub Component Behavior:** Stub the behavior of child components to focus on testing the parent component&#39;s logic.</span>
<span class="line">*   **Use Mocking Libraries:** Use a mocking library like Jest&#39;s </span><span class="token template-punctuation string">\`</span></span>jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> to create mock functions and objects.</span>
<span class="line"></span>
<span class="line">## 6. Common Pitfalls and Gotchas</span>
<span class="line"></span>
<span class="line">### 6.1. Frequent Mistakes Developers Make</span>
<span class="line"></span>
<span class="line">*   **Forgetting to Use </span><span class="token template-punctuation string">\`</span></span><span class="token operator">:</span>key<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> in </span><span class="token template-punctuation string">\`</span></span>v<span class="token operator">-</span><span class="token keyword">for</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">:** Always use the </span><span class="token template-punctuation string">\`</span></span><span class="token operator">:</span>key<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> attribute when rendering lists with </span><span class="token template-punctuation string">\`</span></span>v<span class="token operator">-</span><span class="token keyword">for</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> to ensure efficient DOM updates.</span>
<span class="line">*   **Incorrectly Using </span><span class="token template-punctuation string">\`</span></span>v<span class="token operator">-</span><span class="token keyword">if</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> and </span><span class="token template-punctuation string">\`</span></span>v<span class="token operator">-</span>show<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">:** Understand the difference between </span><span class="token template-punctuation string">\`</span></span>v<span class="token operator">-</span><span class="token keyword">if</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> and </span><span class="token template-punctuation string">\`</span></span>v<span class="token operator">-</span>show<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> and use them appropriately.  </span><span class="token template-punctuation string">\`</span></span>v<span class="token operator">-</span><span class="token keyword">if</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> conditionally renders the element, while </span><span class="token template-punctuation string">\`</span></span>v<span class="token operator">-</span>show<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> toggles the element&#39;s visibility.</span>
<span class="line">*   **Mutating Props Directly:** Avoid mutating props directly. Emit an event to the parent component to update the prop value.</span>
<span class="line">*   **Not Handling Edge Cases:**  Consider edge cases and write tests to cover them.</span>
<span class="line"></span>
<span class="line">### 6.2. Edge Cases to Be Aware Of</span>
<span class="line"></span>
<span class="line">*   **Empty Arrays or Objects:**  Handle cases where data is empty or null.</span>
<span class="line">*   **Unexpected API Responses:**  Handle cases where the API returns an error or unexpected data.</span>
<span class="line">*   **User Input Errors:**  Handle cases where the user enters invalid or malicious input.</span>
<span class="line"></span>
<span class="line">### 6.3. Version-Specific Issues</span>
<span class="line"></span>
<span class="line">*   **Breaking Changes:** Be aware of breaking changes in new Vue.js versions and update the code accordingly.</span>
<span class="line">*   **Deprecated APIs:** Avoid using deprecated APIs and migrate to the recommended alternatives.</span>
<span class="line">*   **Compatibility Issues:** Ensure compatibility with the target browsers and devices.</span>
<span class="line"></span>
<span class="line">### 6.4. Compatibility Concerns</span>
<span class="line"></span>
<span class="line">*   **Browser Compatibility:** Test the application in different browsers and devices to ensure compatibility.</span>
<span class="line">*   **Accessibility:** Ensure the application is accessible to users with disabilities.</span>
<span class="line">*   **Responsive Design:** Implement responsive design to ensure the application looks good on different screen sizes.</span>
<span class="line"></span>
<span class="line">### 6.5. Debugging Strategies</span>
<span class="line"></span>
<span class="line">*   **Vue Devtools:** Use the Vue Devtools browser extension to inspect components, state, and events.</span>
<span class="line">*   **Console Logging:** Use </span><span class="token template-punctuation string">\`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> to debug code and track variables.</span>
<span class="line">*   **Debugger Statements:** Use </span><span class="token template-punctuation string">\`</span></span><span class="token keyword">debugger</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> statements to pause the execution of code and inspect variables.</span>
<span class="line">*   **Error Logging:** Log errors to a server or error tracking service for monitoring and debugging.</span>
<span class="line"></span>
<span class="line">## 7. Tooling and Environment</span>
<span class="line"></span>
<span class="line">### 7.1. Recommended Development Tools</span>
<span class="line"></span>
<span class="line">*   **VS Code with Vetur or Volar:** Use VS Code with the Vetur (Vue tooling) or Volar extension for syntax highlighting, code completion, and other features.</span>
<span class="line">*   **Vue CLI:** Use Vue CLI for scaffolding projects, building, and serving the application.</span>
<span class="line">*   **Vue Devtools:** Use the Vue Devtools browser extension for debugging Vue applications.</span>
<span class="line">*   **ESLint:** Use ESLint with the </span><span class="token template-punctuation string">\`</span></span>eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>vue<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> plugin for linting Vue code.</span>
<span class="line">*   **Prettier:** Use Prettier for formatting Vue code.</span>
<span class="line"></span>
<span class="line">### 7.2. Build Configuration</span>
<span class="line"></span>
<span class="line">*   **Webpack or Rollup:** Use Webpack or Rollup for building the application.</span>
<span class="line">*   **Babel:** Use Babel for transpiling JavaScript code to ensure compatibility with older browsers.</span>
<span class="line">*   **PostCSS:** Use PostCSS for processing CSS code and adding vendor prefixes.</span>
<span class="line"></span>
<span class="line">### 7.3. Linting and Formatting</span>
<span class="line"></span>
<span class="line">*   **ESLint:** Configure ESLint with the </span><span class="token template-punctuation string">\`</span></span>eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>vue<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> plugin to enforce coding standards and prevent errors.</span>
<span class="line">*   **Prettier:** Configure Prettier to automatically format code according to a consistent style.</span>
<span class="line">*   **Husky and lint-staged:** Use Husky and lint-staged to run linters and formatters before committing code.</span>
<span class="line"></span>
<span class="line">### 7.4. Deployment Best Practices</span>
<span class="line"></span>
<span class="line">*   **Build for Production:** Build the application for production with the </span><span class="token template-punctuation string">\`</span></span><span class="token operator">--</span>mode production\` flag<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Optimize Assets<span class="token operator">:</span><span class="token operator">**</span> Optimize assets like images and fonts to reduce file sizes<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Use a <span class="token constant">CDN</span><span class="token operator">:</span><span class="token operator">**</span> Use a content delivery <span class="token function">network</span> <span class="token punctuation">(</span><span class="token constant">CDN</span><span class="token punctuation">)</span> to serve <span class="token keyword">static</span> assets<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Configure Caching<span class="token operator">:</span><span class="token operator">**</span> Configure caching headers to improve performance<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Use <span class="token constant">HTTPS</span><span class="token operator">:</span><span class="token operator">**</span> Use <span class="token constant">HTTPS</span> <span class="token keyword">for</span> all communication<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">### <span class="token number">7.5</span><span class="token punctuation">.</span> <span class="token constant">CI</span><span class="token operator">/</span><span class="token constant">CD</span> Integration</span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Automated Builds<span class="token operator">:</span><span class="token operator">**</span> Configure a <span class="token constant">CI</span><span class="token operator">/</span><span class="token constant">CD</span> pipeline to automatically build and deploy the application whenever changes are pushed to the repository<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Automated Testing<span class="token operator">:</span><span class="token operator">**</span> Run automated tests <span class="token keyword">in</span> the <span class="token constant">CI</span><span class="token operator">/</span><span class="token constant">CD</span> pipeline to ensure code quality<span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">*</span>   <span class="token operator">**</span>Automated Deployment<span class="token operator">:</span><span class="token operator">**</span> Automate the deployment process to reduce manual effort and prevent errors<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">By following these best practices<span class="token punctuation">,</span> you can create high<span class="token operator">-</span>quality<span class="token punctuation">,</span> maintainable<span class="token punctuation">,</span> and performant Vue<span class="token punctuation">.</span>js applications<span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)])])}const c=s(p,[["render",o]]),r=JSON.parse('{"path":"/ai/prompt/%E5%BC%80%E5%8F%91%E7%B1%BB%E6%8F%90%E7%A4%BA%E8%AF%8D/vue%E5%BC%80%E5%8F%91.html","title":"vue 开发","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"ai/prompt/开发类提示词/vue开发.md"}');export{c as comp,r as data};
