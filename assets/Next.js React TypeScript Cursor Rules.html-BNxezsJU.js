import{_ as s,c as a,a as e,o as p}from"./app-D8HvJIFE.js";const t={};function o(c,n){return p(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="next-js-react-typescript-cursor-rules" tabindex="-1"><a class="header-anchor" href="#next-js-react-typescript-cursor-rules"><span>Next.js React TypeScript Cursor Rules</span></a></h1><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">You are an expert <span class="token keyword">in</span> TypeScript<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>js<span class="token punctuation">,</span> Next<span class="token punctuation">.</span>js App Router<span class="token punctuation">,</span> React<span class="token punctuation">,</span> Shadcn <span class="token constant">UI</span><span class="token punctuation">,</span> Radix <span class="token constant">UI</span> and Tailwind<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">  Code Style and Structure</span>
<span class="line">  <span class="token operator">-</span> Write concise<span class="token punctuation">,</span> technical TypeScript code <span class="token keyword">with</span> accurate examples<span class="token punctuation">.</span></span>
<span class="line">  <span class="token operator">-</span> Use functional and declarative programming patterns<span class="token punctuation">;</span> avoid classes<span class="token punctuation">.</span></span>
<span class="line">  <span class="token operator">-</span> Prefer iteration and modularization over code duplication<span class="token punctuation">.</span></span>
<span class="line">  <span class="token operator">-</span> Use descriptive variable names <span class="token keyword">with</span> auxiliary <span class="token function">verbs</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>g<span class="token punctuation">.</span><span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> hasError<span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">  <span class="token operator">-</span> Structure files<span class="token operator">:</span> exported component<span class="token punctuation">,</span> subcomponents<span class="token punctuation">,</span> helpers<span class="token punctuation">,</span> <span class="token keyword">static</span> content<span class="token punctuation">,</span> types<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">  Naming Conventions</span>
<span class="line">  <span class="token operator">-</span> Use lowercase <span class="token keyword">with</span> dashes <span class="token keyword">for</span> <span class="token function">directories</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>g<span class="token punctuation">.</span><span class="token punctuation">,</span> components<span class="token operator">/</span>auth<span class="token operator">-</span>wizard<span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">  <span class="token operator">-</span> Favor named exports <span class="token keyword">for</span> components<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">  TypeScript Usage</span>
<span class="line">  <span class="token operator">-</span> Use TypeScript <span class="token keyword">for</span> all code<span class="token punctuation">;</span> prefer interfaces over types<span class="token punctuation">.</span></span>
<span class="line">  <span class="token operator">-</span> Avoid enums<span class="token punctuation">;</span> use maps instead<span class="token punctuation">.</span></span>
<span class="line">  <span class="token operator">-</span> Use functional components <span class="token keyword">with</span> TypeScript interfaces<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">  Syntax and Formatting</span>
<span class="line">  <span class="token operator">-</span> Use the <span class="token string">&quot;function&quot;</span> keyword <span class="token keyword">for</span> pure functions<span class="token punctuation">.</span></span>
<span class="line">  <span class="token operator">-</span> Avoid unnecessary curly braces <span class="token keyword">in</span> conditionals<span class="token punctuation">;</span> use concise syntax <span class="token keyword">for</span> simple statements<span class="token punctuation">.</span></span>
<span class="line">  <span class="token operator">-</span> Use declarative <span class="token constant">JSX</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">  <span class="token constant">UI</span> and Styling</span>
<span class="line">  <span class="token operator">-</span> Use Shadcn <span class="token constant">UI</span><span class="token punctuation">,</span> Radix<span class="token punctuation">,</span> and Tailwind <span class="token keyword">for</span> components and styling<span class="token punctuation">.</span></span>
<span class="line">  <span class="token operator">-</span> Implement responsive design <span class="token keyword">with</span> Tailwind <span class="token constant">CSS</span><span class="token punctuation">;</span> use a mobile<span class="token operator">-</span>first approach<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">  Performance Optimization</span>
<span class="line">  <span class="token operator">-</span> Minimize <span class="token string">&#39;use client&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;useEffect&#39;</span><span class="token punctuation">,</span> and <span class="token string">&#39;setState&#39;</span><span class="token punctuation">;</span> favor React Server <span class="token function">Components</span> <span class="token punctuation">(</span><span class="token constant">RSC</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">  <span class="token operator">-</span> Wrap client components <span class="token keyword">in</span> Suspense <span class="token keyword">with</span> fallback<span class="token punctuation">.</span></span>
<span class="line">  <span class="token operator">-</span> Use dynamic loading <span class="token keyword">for</span> non<span class="token operator">-</span>critical components<span class="token punctuation">.</span></span>
<span class="line">  <span class="token operator">-</span> Optimize images<span class="token operator">:</span> use WebP format<span class="token punctuation">,</span> include size data<span class="token punctuation">,</span> implement lazy loading<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">  Key Conventions</span>
<span class="line">  <span class="token operator">-</span> Use <span class="token string">&#39;nuqs&#39;</span> <span class="token keyword">for</span> <span class="token constant">URL</span> search parameter state management<span class="token punctuation">.</span></span>
<span class="line">  <span class="token operator">-</span> Optimize Web <span class="token function">Vitals</span> <span class="token punctuation">(</span><span class="token constant">LCP</span><span class="token punctuation">,</span> <span class="token constant">CLS</span><span class="token punctuation">,</span> <span class="token constant">FID</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">  <span class="token operator">-</span> Limit <span class="token string">&#39;use client&#39;</span><span class="token operator">:</span></span>
<span class="line">    <span class="token operator">-</span> Favor server components and Next<span class="token punctuation">.</span>js <span class="token constant">SSR</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token operator">-</span> Use only <span class="token keyword">for</span> Web <span class="token constant">API</span> access <span class="token keyword">in</span> small components<span class="token punctuation">.</span></span>
<span class="line">    <span class="token operator">-</span> Avoid <span class="token keyword">for</span> data fetching or state management<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">  Follow Next<span class="token punctuation">.</span>js docs <span class="token keyword">for</span> Data Fetching<span class="token punctuation">,</span> Rendering<span class="token punctuation">,</span> and Routing<span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)])])}const i=s(t,[["render",o]]),r=JSON.parse('{"path":"/tool/cursor/cursor%20rules/Next.js%20React%20TypeScript%20Cursor%20Rules.html","title":"Next.js React TypeScript Cursor Rules","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"tool/cursor/cursor rules/Next.js React TypeScript Cursor Rules.md"}');export{i as comp,r as data};
