import{_ as r,c as t,a,o as c}from"./app-D8HvJIFE.js";const i={};function o(n,e){return c(),t("div",null,[...e[0]||(e[0]=[a('<h1 id="reactive的实现" tabindex="-1"><a class="header-anchor" href="#reactive的实现"><span>reactive的实现</span></a></h1><p>import {isObject} from &#39;@vue/shared&#39;</p><p>export function reactive(target) { if(!isObject(target)) { return } const proxy = new Proxy(target,{ get(target,key,receiver) { // return target[key] return Reflect.get(target,key,receiver) }, set(target,key,value,receiver) { //target[key] = value return Reflect.set(target,key,value,receiver) } }) return proxy; }</p><p>未完待续</p><h2 id="额外拓展" tabindex="-1"><a class="header-anchor" href="#额外拓展"><span>额外拓展</span></a></h2><h3 id="关于-reactive-和-ref-的对比" tabindex="-1"><a class="header-anchor" href="#关于-reactive-和-ref-的对比"><span>关于 reactive 和 ref 的对比</span></a></h3><p>reactive vs ref</p><blockquote><p>reactive参数一般接受对象或数组，是深层次的响应式。ref参数一般接收简单数据类型，若ref接收对象为参数，本质上会转变为reactive方法 在JS中访问ref的值需要手动添加.value，访问reactive不需要 reactive的底层响应式原理是Proxy，ref的原理是defineProperty</p></blockquote>',8)])])}const d=r(i,[["render",o]]),v=JSON.parse('{"path":"/vue3/vue3%E6%BA%90%E7%A0%81%E7%B1%BB/reactive%E7%9A%84%E5%AE%9E%E7%8E%B0.html","title":"reactive的实现","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"vue3/vue3源码类/reactive的实现.md"}');export{d as comp,v as data};
