import{_ as a,c as s,a as t,o as i}from"./app-D8HvJIFE.js";const n={};function l(d,e){return i(),s("div",null,[...e[0]||(e[0]=[t(`<h1 id="git时光机" tabindex="-1"><a class="header-anchor" href="#git时光机"><span>git时光机</span></a></h1><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ git log</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>git log命令显示从最近到最远的提交日志</p><p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line"> git log --pretty=oneline</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。</p></blockquote><blockquote><p>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。</p></blockquote><blockquote><p>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</p></blockquote><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line"></span>
<span class="line">git reset --hard 1094a  //返回到指定某一版本</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">git reset --hard HEAD^ //返回上一个版本</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果只是commit 提交的信息我们想改，git reset --soft head^ 就会回到我们之前add的状态，可以继续修改和提交了。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">git reset --soft head^ 软撤销，head^是指当前commit，可以改成任意commit id</span>
<span class="line">git reset --hard head^ 硬撤销，彻底丢掉这次提交的全部修改</span>
<span class="line">git reset 不加参数，本次修改就会回到add之前的状态</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)])])}const c=a(n,[["render",l]]),o=JSON.parse('{"path":"/git/git%E6%97%B6%E5%85%89%E6%9C%BA.html","title":"git时光机","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"git/git时光机.md"}');export{c as comp,o as data};
