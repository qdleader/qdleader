import{_ as s,c as a,a as p,o as t}from"./app-D8HvJIFE.js";const e={};function o(c,n){return t(),a("div",null,[...n[0]||(n[0]=[p(`<h1 id="_1-乾坤的沙箱隔离机制" tabindex="-1"><a class="header-anchor" href="#_1-乾坤的沙箱隔离机制"><span>1.乾坤的沙箱隔离机制</span></a></h1><h2 id="乾坤沙箱机制" tabindex="-1"><a class="header-anchor" href="#乾坤沙箱机制"><span>乾坤沙箱机制</span></a></h2><p>我们把Js隔离机制常常称作沙箱，事实上，乾坤有三种Js隔离机制，并且在源代码中也是以 SnapshotSandbox、LegacySandbox、ProxySandbox三个类名来指代三种不同的隔离机制。下文我们统一以快照沙箱、支持单应用的代理沙箱、支持多应用的代理沙箱，来代表这三种不同的Js隔离机制。</p><p>那么问题来了，隔离就隔离，怎么有这么多沙箱？一开始乾坤也只有一种沙箱叫“快照沙箱”，也就是由SnapshotSandbox类来实现的沙箱。这个沙箱有个缺点，就是需要遍历window上的所有属性，性能较差。随着ES6的普及，利用Proxy可以比较良好的解决这个问题，这就诞生了LegacySandbox，可以实现和快照沙箱一样的功能，但是却性能更好，和SnapshotSandbox一样，由于会污染全局的window，LegacySandbox也仅仅允许页面同时运行一个微应用，所以我们也称LegacySandbox为支持单应用的代理沙箱。</p><p>从LegacySandbox这个类名可以看出，一开始肯定是不叫LegacySandbox，是因为有了更好的机制，才将这个名字强加给它了。那这个更好的机制是什么呢，就是ProxySandbox，它可以支持一个页面运行多个微应用，因此我们称ProxySandbox为支持多应用的代理沙箱。事实上，LegacySandbox在未来应该会消失，因为LegacySandbox可以做的事情，ProxySandbox都可以做，而SanpsshotSandbox因为向下兼容的原因反而会和ProxySandbox长期并存。下面我们就编码实现这三种沙箱机制的核心逻辑。 编码实现三个沙箱的核心逻辑 为了理解方便，下文我会用最简单的逻辑最基础的语法来实现三个沙箱，逻辑肯定不会很严密，但可以方便我们更快速的理解其中的原理。</p><p>快照沙箱-极简版</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">SnapshotSandBox</span><span class="token punctuation">{</span></span>
<span class="line">    windowSnapshot <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    modifyPropsMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">in</span> window<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>windowSnapshot<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>modifyPropsMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">            window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modifyPropsMap<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">in</span> window<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>windowSnapshot<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>modifyPropsMap<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">                window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>windowSnapshot<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 验证:</span></span>
<span class="line"><span class="token keyword">let</span> snapshotSandBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnapshotSandBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">snapshotSandBox<span class="token punctuation">.</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">window<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token string">&#39;Beijing&#39;</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;window.city-01:&quot;</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">snapshotSandBox<span class="token punctuation">.</span><span class="token function">inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;window.city-02:&quot;</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">snapshotSandBox<span class="token punctuation">.</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;window.city-03:&quot;</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">snapshotSandBox<span class="token punctuation">.</span><span class="token function">inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">//输出：</span></span>
<span class="line"><span class="token comment">//window.city-01: Beijing</span></span>
<span class="line"><span class="token comment">//window.city-02: undefined</span></span>
<span class="line"><span class="token comment">//window.city-03: Beijing</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的代码可以看出，快照沙箱的核心逻辑很简单，就是在激活沙箱和沙箱失活的时候各做两件事情。</p><p>注：沙箱激活 就是此时我们的微应用处于运行中，这个阶段有可能对window上的属性进行操作改变；沙箱失活 就是此时我们的微应用已经停止了对window的影响</p><h4 id="在沙箱激活的时候" tabindex="-1"><a class="header-anchor" href="#在沙箱激活的时候"><span>在沙箱激活的时候：</span></a></h4><p>记录window当时的状态（我们把这个状态称之为快照，也就是快照沙箱这个名称的来源）； 恢复上一次沙箱失活时记录的沙箱运行过程中对window做的状态改变，也就是上一次沙箱激活后对window做了哪些改变，现在也保持一样的改变。</p><h4 id="在沙箱失活的时候" tabindex="-1"><a class="header-anchor" href="#在沙箱失活的时候"><span>在沙箱失活的时候：</span></a></h4><p>记录window上有哪些状态发生了变化（沙箱自激活开始，到失活的这段时间）； 清除沙箱在激活之后在window上改变的状态，从代码可以看出，就是让window此时的属性状态和刚激活时候的window的属性状态进行对比，不同的属性状态就以快照为准，恢复到未改变之前的状态。</p><h4 id="从上面可以看出-快照沙箱存在两个重要的问题" tabindex="-1"><a class="header-anchor" href="#从上面可以看出-快照沙箱存在两个重要的问题"><span>从上面可以看出，快照沙箱存在两个重要的问题：</span></a></h4><blockquote><p>会改变全局window的属性，如果同时运行多个微应用，多个应用同时改写window上的属性，势必会出现状态混乱，这也就是为什么快照沙箱无法支持多各微应用同时运行的原因。关于这个问题，下文中支持多应用的代理沙箱可以很好的解决这个问题；</p></blockquote><blockquote><p>会通过for(prop in window){}的方式来遍历window上的所有属性，window属性众多，这其实是一件很耗费性能的事情。关于这个问题支持单应用的代理沙箱和支持多应用的代理沙箱都可以规避。</p></blockquote><p>支持单应用的代理沙箱-极简版</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">LegacySandBox</span><span class="token punctuation">{</span></span>
<span class="line">    addedPropsMapInSandbox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    modifiedPropsOriginalValueMapInSandbox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    currentUpdatedPropsValueMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    proxyWindow<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">setWindowProp</span><span class="token punctuation">(</span><span class="token parameter">prop<span class="token punctuation">,</span> value<span class="token punctuation">,</span> toDelete <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> toDelete<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">delete</span> window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">            window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>currentUpdatedPropsValueMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setWindowProp</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>modifiedPropsOriginalValueMapInSandbox<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setWindowProp</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>addedPropsMapInSandbox<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setWindowProp</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> fakeWindow <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>proxyWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>fakeWindow<span class="token punctuation">,</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">const</span> originalVal <span class="token operator">=</span> window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">this</span><span class="token punctuation">.</span>addedPropsMapInSandbox<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>modifiedPropsOriginalValueMapInSandbox<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">this</span><span class="token punctuation">.</span>modifiedPropsOriginalValueMapInSandbox<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> originalVal<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>currentUpdatedPropsValueMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 验证：</span></span>
<span class="line"><span class="token keyword">let</span> legacySandBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LegacySandBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">legacySandBox<span class="token punctuation">.</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">legacySandBox<span class="token punctuation">.</span>proxyWindow<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token string">&#39;Beijing&#39;</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;window.city-01:&#39;</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">legacySandBox<span class="token punctuation">.</span><span class="token function">inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;window.city-02:&#39;</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">legacySandBox<span class="token punctuation">.</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;window.city-03:&#39;</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">legacySandBox<span class="token punctuation">.</span><span class="token function">inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 输出：</span></span>
<span class="line"><span class="token comment">// window.city-01: Beijing</span></span>
<span class="line"><span class="token comment">// window.city-02: undefined</span></span>
<span class="line"><span class="token comment">// window.city-03: Beijing</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的代码可以看出，其实现的功能和快照沙箱是一模一样的，不同的是，通过三个变量来记住沙箱激活后window发生变化过的所有属性，这样在后续的状态还原时候就不再需要遍历window的所有属性来进行对比，提升了程序运行的性能。但是这仍然改变不了这种机制仍然污染了window的状态的事实，因此也就无法承担起同时支持多个微应用运行的任务。</p><h3 id="支持多应用的代理沙箱-极简版" tabindex="-1"><a class="header-anchor" href="#支持多应用的代理沙箱-极简版"><span>支持多应用的代理沙箱-极简版</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">ProxySandBox</span><span class="token punctuation">{</span></span>
<span class="line">    proxyWindow<span class="token punctuation">;</span></span>
<span class="line">    isRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>isRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>isRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> fakeWindow <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>proxyWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>fakeWindow<span class="token punctuation">,</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isRunning<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                    target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span>  prop <span class="token keyword">in</span> target <span class="token operator">?</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">:</span> window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>// 验证： let proxySandBox1 = new ProxySandBox(); let proxySandBox2 = new ProxySandBox(); proxySandBox1.active(); proxySandBox2.active(); proxySandBox1.proxyWindow.city = &#39;Beijing&#39;; proxySandBox2.proxyWindow.city = &#39;Shanghai&#39;; console.log(&#39;active:proxySandBox1:window.city:&#39;, proxySandBox1.proxyWindow.city); console.log(&#39;active:proxySandBox2:window.city:&#39;, proxySandBox2.proxyWindow.city); console.log(&#39;window:window.city:&#39;, window.city); proxySandBox1.inactive(); proxySandBox2.inactive(); console.log(&#39;inactive:proxySandBox1:window.city:&#39;, proxySandBox1.proxyWindow.city); console.log(&#39;inactive:proxySandBox2:window.city:&#39;, proxySandBox2.proxyWindow.city); console.log(&#39;window:window.city:&#39;, window.city); // 输出： // active:proxySandBox1:window.city: Beijing // active:proxySandBox2:window.city: Shanghai // window:window.city: undefined // inactive:proxySandBox1:window.city: Beijing // inactive:proxySandBox2:window.city: Shanghai // window:window.city: undefined</p><p>从上面的代码可以发现，ProxySandbox，完全不存在状态恢复的逻辑，同时也不需要记录属性值的变化，因为所有的变化都是沙箱内部的变化，和window没有关系，window上的属性至始至终都没有受到过影响。</p><p>我们可能会问，ProxySandbox已经这么好了，性能优良还支持多个微应用同时运行，那自然也支持单个微应用运行，那LegacySandbox存在还有什么意义呢，这个问题问得很好，其实本身在未来存在的意义也不大了，只不过是因为历史原因还在服役罢了，从Legacy这个单词就已经能推断出LegacySandbox在乾坤中的位置。我们可能还会继续问，那SnapshotSandbox存在还有什么意义呢，这个还真有不小作用，Proxy是新ES6的新事物，低版本浏览器无法兼容所以SnapshotSandbox还会长期存在。虽然这里极简版本逻辑很少，但是由于ProxySandbox要支持多个微应用运行，里面的逻辑会SnapshotsSandbox、LegacySandbox的都要丰富一些。</p><p>其实到了这里，如果读者朋友已经理解了上面的思路，就可以说已经理解了乾坤的Js隔离机制。下面我们来看看乾坤的源码具体是怎么实现的这三个沙箱机制。 乾坤的三个沙箱的源码分析 SnapshotSandbox 源码解析</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> type <span class="token punctuation">{</span> SandBox <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../interfaces&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> SandBoxType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../interfaces&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">iter</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token keyword">typeof</span> window<span class="token punctuation">,</span> <span class="token function-variable function">callbackFn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">prop</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// eslint-disable-next-line guard-for-in, no-restricted-syntax</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// patch for clearInterval for compatible reason, see #1490</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span> <span class="token operator">||</span> prop <span class="token operator">===</span> <span class="token string">&#39;clearInterval&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">callbackFn</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 基于 diff 方式实现的沙箱，用于不支持 Proxy 的低版本浏览器</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">SnapshotSandbox</span> <span class="token keyword">implements</span> <span class="token class-name">SandBox</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">proxy</span><span class="token operator">:</span> WindowProxy<span class="token punctuation">;</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line">  <span class="token literal-property property">type</span><span class="token operator">:</span> SandBoxType<span class="token punctuation">;</span></span>
<span class="line">  sandboxRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">private</span> windowSnapshot<span class="token operator">!</span><span class="token operator">:</span> Window<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token literal-property property">modifyPropsMap</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>proxy <span class="token operator">=</span> window<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> SandBoxType<span class="token punctuation">.</span>Snapshot<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 记录当前快照</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>windowSnapshot <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> Window<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">iter</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>windowSnapshot<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 恢复之前的变更</span></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>modifyPropsMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">p</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      window<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modifyPropsMap<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>sandboxRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>modifyPropsMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">iter</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>windowSnapshot<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 记录变更，恢复环境</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>modifyPropsMap<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>windowSnapshot<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[qiankun:sandbox] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> origin window restore...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>modifyPropsMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>sandboxRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于SnapshotSandbox，由于逻辑相对简单，和极简版相比其实差别不大。值得提出来的是里面的iter方法，将遍历window属性的代码抽离出来了，调用这个工具方法后，我们只需要专注于迭代到相应属性时候需要进行的处理。</p><p>LegacySandbox 源码解析</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"> <span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> SandBox <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../interfaces&#39;</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">import</span> <span class="token punctuation">{</span> SandBoxType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../interfaces&#39;</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">import</span> <span class="token punctuation">{</span> getTargetValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../common&#39;</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"> <span class="token keyword">function</span> <span class="token function">isPropConfigurable</span><span class="token punctuation">(</span>target<span class="token operator">:</span> WindowProxy<span class="token punctuation">,</span> prop<span class="token operator">:</span> PropertyKey<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">const</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">return</span> descriptor <span class="token operator">?</span> descriptor<span class="token punctuation">.</span>configurable <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"> <span class="token comment">/**</span>
<span class="line">  * 基于 Proxy 实现的沙箱</span>
<span class="line">  * TODO: 为了兼容性 singular 模式下依旧使用该沙箱，等新沙箱稳定之后再切换</span>
<span class="line">  */</span></span>
<span class="line"> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">LegacySandbox</span> <span class="token keyword">implements</span> <span class="token class-name">SandBox</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">/** 沙箱期间新增的全局变量 */</span></span>
<span class="line">   <span class="token keyword">private</span> addedPropsMapInSandbox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span>PropertyKey<span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   <span class="token comment">/** 沙箱期间更新的全局变量 */</span></span>
<span class="line">   <span class="token keyword">private</span> modifiedPropsOriginalValueMapInSandbox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span>PropertyKey<span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   <span class="token comment">/** 持续记录更新的(新增和修改的)全局变量的 map，用于在任意时刻做 snapshot */</span></span>
<span class="line">   <span class="token keyword">private</span> currentUpdatedPropsValueMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span>PropertyKey<span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   proxy<span class="token operator">:</span> WindowProxy<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   globalContext<span class="token operator">:</span> <span class="token keyword">typeof</span> window<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   type<span class="token operator">:</span> SandBoxType<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   sandboxRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   latestSetProp<span class="token operator">:</span> PropertyKey <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   <span class="token keyword">private</span> <span class="token function">setWindowProp</span><span class="token punctuation">(</span>prop<span class="token operator">:</span> PropertyKey<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> toDelete<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> toDelete<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token comment">// eslint-disable-next-line no-param-reassign</span></span>
<span class="line">       <span class="token keyword">delete</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>globalContext <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPropConfigurable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>globalContext<span class="token punctuation">,</span> prop<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> prop <span class="token operator">!==</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>globalContext<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> <span class="token punctuation">{</span> writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> configurable<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token comment">// eslint-disable-next-line no-param-reassign</span></span>
<span class="line">       <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>globalContext <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">   <span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>sandboxRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">this</span><span class="token punctuation">.</span>currentUpdatedPropsValueMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setWindowProp</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>sandboxRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">   <span class="token function">inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[qiankun:sandbox] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> modified global properties restore...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">         <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>addedPropsMapInSandbox<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">         <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>modifiedPropsOriginalValueMapInSandbox<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">     <span class="token comment">// renderSandboxSnapshot = snapshot(currentUpdatedPropsValueMapForSnapshot);</span></span>
<span class="line">     <span class="token comment">// restore global props to initial snapshot</span></span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>modifiedPropsOriginalValueMapInSandbox<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setWindowProp</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>addedPropsMapInSandbox<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setWindowProp</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>sandboxRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">   <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> globalContext <span class="token operator">=</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>globalContext <span class="token operator">=</span> globalContext<span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> SandBoxType<span class="token punctuation">.</span>LegacyProxy<span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">const</span> <span class="token punctuation">{</span> addedPropsMapInSandbox<span class="token punctuation">,</span> modifiedPropsOriginalValueMapInSandbox<span class="token punctuation">,</span> currentUpdatedPropsValueMap <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">     <span class="token keyword">const</span> rawWindow <span class="token operator">=</span> globalContext<span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">const</span> fakeWindow <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Window<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">     <span class="token keyword">const</span> <span class="token function-variable function">setTrap</span> <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">:</span> PropertyKey<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> originalValue<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> sync2Window <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sandboxRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rawWindow<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           addedPropsMapInSandbox<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>modifiedPropsOriginalValueMapInSandbox<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token comment">// 如果当前 window 对象存在该属性，且 record map 中未记录过，则记录该属性初始值</span></span>
<span class="line">           modifiedPropsOriginalValueMapInSandbox<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> originalValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">         currentUpdatedPropsValueMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span>sync2Window<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token comment">// 必须重新设置 window 对象保证下次 get 时能拿到已更新的数据</span></span>
<span class="line">           <span class="token punctuation">(</span>rawWindow <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">         <span class="token keyword">this</span><span class="token punctuation">.</span>latestSetProp <span class="token operator">=</span> p<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">       <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[qiankun] Set window.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>p<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> while sandbox destroyed or inactive in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">       <span class="token comment">// 在 strict-mode 下，Proxy 的 handler.set 返回 false 会抛出 TypeError，在沙箱卸载的情况下应该忽略错误</span></span>
<span class="line">       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">     <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>fakeWindow<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">       set<span class="token operator">:</span> <span class="token punctuation">(</span>_<span class="token operator">:</span> Window<span class="token punctuation">,</span> p<span class="token operator">:</span> PropertyKey<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">const</span> originalValue <span class="token operator">=</span> <span class="token punctuation">(</span>rawWindow <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">         </span>
<span class="line">         <span class="token keyword">return</span> <span class="token function">setTrap</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> value<span class="token punctuation">,</span> originalValue<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">       <span class="token function">get</span><span class="token punctuation">(</span>_<span class="token operator">:</span> Window<span class="token punctuation">,</span> p<span class="token operator">:</span> PropertyKey<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token comment">// avoid who using window.window or window.self to escape the sandbox environment to touch the really window</span></span>
<span class="line">         <span class="token comment">// or use window.top to check if an iframe context</span></span>
<span class="line">         <span class="token comment">// see https://github.com/eligrey/FileSaver.js/blob/master/src/FileSaver.js#L13</span></span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token string">&#39;top&#39;</span> <span class="token operator">||</span> p <span class="token operator">===</span> <span class="token string">&#39;parent&#39;</span> <span class="token operator">||</span> p <span class="token operator">===</span> <span class="token string">&#39;window&#39;</span> <span class="token operator">||</span> p <span class="token operator">===</span> <span class="token string">&#39;self&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token keyword">return</span> proxy<span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">         <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">(</span>rawWindow <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token keyword">return</span> <span class="token function">getTargetValue</span><span class="token punctuation">(</span>rawWindow<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">       <span class="token comment">// trap in operator</span></span>
<span class="line">       <span class="token comment">// see https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/constants.js#L12</span></span>
<span class="line">       <span class="token function">has</span><span class="token punctuation">(</span>_<span class="token operator">:</span> Window<span class="token punctuation">,</span> p<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">return</span> p <span class="token keyword">in</span> rawWindow<span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">       <span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>_<span class="token operator">:</span> Window<span class="token punctuation">,</span> p<span class="token operator">:</span> PropertyKey<span class="token punctuation">)</span><span class="token operator">:</span> PropertyDescriptor <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">const</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>rawWindow<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token comment">// A property cannot be reported as non-configurable, if it does not exists as an own property of the target object</span></span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span>descriptor <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>descriptor<span class="token punctuation">.</span>configurable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           descriptor<span class="token punctuation">.</span>configurable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line">         <span class="token keyword">return</span> descriptor<span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">       <span class="token function">defineProperty</span><span class="token punctuation">(</span>_<span class="token operator">:</span> Window<span class="token punctuation">,</span> p<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">,</span> attributes<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">const</span> originalValue <span class="token operator">=</span> <span class="token punctuation">(</span>rawWindow <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token keyword">const</span> done <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>rawWindow<span class="token punctuation">,</span> p<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">(</span>rawWindow <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token function">setTrap</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> value<span class="token punctuation">,</span> originalValue<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">         <span class="token keyword">return</span> done<span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>proxy <span class="token operator">=</span> proxy<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和极简版相比，会发现源码中LegacySandbox的proxy对象除了get、set，还有has、getWownPropertyDescriptor、defineProperty等方法，仔细看会发现，这里面的逻辑，不管是返回值还是设置值，都和get、set一样，都是针对的全局window。看到这里有没有觉得Js基本功很重要，如果对于赋值操作只管set，忽略方法Object.defineProperty也可以改变值，那将这个程序将会漏洞百出。同样如果不关心descriptor的状态，在实际编码过程中，可能就会忽略代码中注释指出的问题 javascript复制代码 // A property cannot be reported as non-configurable, if it does not exists as an own property of the target object</p><p>// 译: 在getOwnPropertyDescriptor方法中，如果返回的descriptor不是target自己的属性的descriptor（所谓自己的属性的descriptor，就是能通过Object.getOwnPropertyDescriptor方法获取的descriptor），那这个descriptor的configurable值就不能是false</p><h2 id="proxysandbox-源码解析" tabindex="-1"><a class="header-anchor" href="#proxysandbox-源码解析"><span>ProxySandbox 源码解析</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"> <span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> SandBox <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../interfaces&#39;</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">import</span> <span class="token punctuation">{</span> SandBoxType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../interfaces&#39;</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">import</span> <span class="token punctuation">{</span> nativeGlobal<span class="token punctuation">,</span> nextTask <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../utils&#39;</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">import</span> <span class="token punctuation">{</span> getTargetValue<span class="token punctuation">,</span> setCurrentRunningApp<span class="token punctuation">,</span> getCurrentRunningApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./common&#39;</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"> <span class="token keyword">type</span> <span class="token class-name">SymbolTarget</span> <span class="token operator">=</span> <span class="token string">&#39;target&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;globalContext&#39;</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"> <span class="token keyword">type</span> <span class="token class-name">FakeWindow</span> <span class="token operator">=</span> Window <span class="token operator">&amp;</span> Record<span class="token operator">&lt;</span>PropertyKey<span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"> <span class="token comment">/**</span>
<span class="line">  * fastest(at most time) unique array method</span>
<span class="line">  * @see https://jsperf.com/array-filter-unique/30</span>
<span class="line">  */</span></span>
<span class="line"> <span class="token keyword">function</span> <span class="token function">uniq</span><span class="token punctuation">(</span>array<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> PropertyKey<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">return</span> element <span class="token keyword">in</span> <span class="token keyword">this</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">[</span>element<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"> <span class="token comment">// zone.js will overwrite Object.defineProperty</span></span>
<span class="line"> <span class="token keyword">const</span> rawObjectDefineProperty <span class="token operator">=</span> Object<span class="token punctuation">.</span>defineProperty<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"> <span class="token keyword">const</span> variableWhiteListInDev <span class="token operator">=</span></span>
<span class="line">   process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span> <span class="token operator">||</span> window<span class="token punctuation">.</span>__QIANKUN_DEVELOPMENT__</span>
<span class="line">     <span class="token operator">?</span> <span class="token punctuation">[</span></span>
<span class="line">         <span class="token comment">// for react hot reload</span></span>
<span class="line">         <span class="token comment">// see https://github.com/facebook/create-react-app/blob/66bf7dfc43350249e2f09d138a20840dae8a0a4a/packages/react-error-overlay/src/index.js#L180</span></span>
<span class="line">         <span class="token string">&#39;__REACT_ERROR_OVERLAY_GLOBAL_HOOK__&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token punctuation">]</span></span>
<span class="line">     <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token comment">// who could escape the sandbox</span></span>
<span class="line"> <span class="token keyword">const</span> variableWhiteList<span class="token operator">:</span> PropertyKey<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">   <span class="token comment">// FIXME System.js used a indirect call with eval, which would make it scope escape to global</span></span>
<span class="line">   <span class="token comment">// To make System.js works well, we write it back to global window temporary</span></span>
<span class="line">   <span class="token comment">// see https://github.com/systemjs/systemjs/blob/457f5b7e8af6bd120a279540477552a07d5de086/src/evaluate.js#L106</span></span>
<span class="line">   <span class="token string">&#39;System&#39;</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">   <span class="token comment">// see https://github.com/systemjs/systemjs/blob/457f5b7e8af6bd120a279540477552a07d5de086/src/instantiate.js#L357</span></span>
<span class="line">   <span class="token string">&#39;__cjsWrapper&#39;</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token operator">...</span>variableWhiteListInDev<span class="token punctuation">,</span></span>
<span class="line"> <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"> <span class="token comment">/*</span>
<span class="line">  variables who are impossible to be overwrite need to be escaped from proxy sandbox for performance reasons</span>
<span class="line">  */</span></span>
<span class="line"> <span class="token keyword">const</span> unscopables <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">undefined</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token builtin">Array</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   Object<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   String<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   Boolean<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   Math<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   Number<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   Symbol<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   parseFloat<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   Float32Array<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   isNaN<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token number">Infinity</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   Reflect<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   Float64Array<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token builtin">Function</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   Map<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token number">NaN</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token builtin">Promise</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   Proxy<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   Set<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   parseInt<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">   requestAnimationFrame<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"> <span class="token keyword">const</span> useNativeWindowForBindingsProps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span>PropertyKey<span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">   <span class="token punctuation">[</span><span class="token string">&#39;fetch&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token punctuation">[</span><span class="token string">&#39;mockDomAPIInBlackList&#39;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"> <span class="token keyword">function</span> <span class="token function">createFakeWindow</span><span class="token punctuation">(</span>globalContext<span class="token operator">:</span> Window<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">// map always has the fastest performance in has check scenario</span></span>
<span class="line">   <span class="token comment">// see https://jsperf.com/array-indexof-vs-set-has/23</span></span>
<span class="line">   <span class="token keyword">const</span> propertiesWithGetter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span>PropertyKey<span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">const</span> fakeWindow <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> FakeWindow<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   <span class="token comment">/*</span>
<span class="line">    copy the non-configurable property of global to fakeWindow</span>
<span class="line">    see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor</span>
<span class="line">    &gt; A property cannot be reported as non-configurable, if it does not exists as an own property of the target object or if it exists as a configurable own property of the target object.</span>
<span class="line">    */</span></span>
<span class="line">   Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>globalContext<span class="token punctuation">)</span></span>
<span class="line">     <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">const</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>globalContext<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token keyword">return</span> <span class="token operator">!</span>descriptor<span class="token operator">?.</span>configurable<span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">     <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">const</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>globalContext<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token keyword">if</span> <span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">const</span> hasGetter <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">         <span class="token comment">/*</span>
<span class="line">          make top/self/window property configurable and writable, otherwise it will cause TypeError while get trap return.</span>
<span class="line">          see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/get</span>
<span class="line">          &gt; The value reported for a property must be the same as the value of the corresponding target object property if the target object property is a non-writable, non-configurable data property.</span>
<span class="line">          */</span></span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span></span>
<span class="line">           p <span class="token operator">===</span> <span class="token string">&#39;top&#39;</span> <span class="token operator">||</span></span>
<span class="line">           p <span class="token operator">===</span> <span class="token string">&#39;parent&#39;</span> <span class="token operator">||</span></span>
<span class="line">           p <span class="token operator">===</span> <span class="token string">&#39;self&#39;</span> <span class="token operator">||</span></span>
<span class="line">           p <span class="token operator">===</span> <span class="token string">&#39;window&#39;</span> <span class="token operator">||</span></span>
<span class="line">           <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;test&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token string">&#39;mockTop&#39;</span> <span class="token operator">||</span> p <span class="token operator">===</span> <span class="token string">&#39;mockSafariTop&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">         <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           descriptor<span class="token punctuation">.</span>configurable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">           <span class="token comment">/*</span>
<span class="line">            The descriptor of window.window/window.top/window.self in Safari/FF are accessor descriptors, we need to avoid adding a data descriptor while it was</span>
<span class="line">            Example:</span>
<span class="line">             Safari/FF: Object.getOwnPropertyDescriptor(window, &#39;top&#39;) -&gt; {get: function, set: undefined, enumerable: true, configurable: false}</span>
<span class="line">             Chrome: Object.getOwnPropertyDescriptor(window, &#39;top&#39;) -&gt; {value: Window, writable: false, enumerable: true, configurable: false}</span>
<span class="line">            */</span></span>
<span class="line">           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasGetter<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">             descriptor<span class="token punctuation">.</span>writable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">           <span class="token punctuation">}</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span>hasGetter<span class="token punctuation">)</span> propertiesWithGetter<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">         <span class="token comment">// freeze the descriptor to avoid being modified by zone.js</span></span>
<span class="line">         <span class="token comment">// see https://github.com/angular/zone.js/blob/a5fe09b0fac27ac5df1fa746042f96f05ccb6a00/lib/browser/define-property.ts#L71</span></span>
<span class="line">         <span class="token function">rawObjectDefineProperty</span><span class="token punctuation">(</span>fakeWindow<span class="token punctuation">,</span> p<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line">     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">     fakeWindow<span class="token punctuation">,</span></span>
<span class="line">     propertiesWithGetter<span class="token punctuation">,</span></span>
<span class="line">   <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"> <span class="token keyword">let</span> activeSandboxCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"> <span class="token comment">/**</span>
<span class="line">  * 基于 Proxy 实现的沙箱</span>
<span class="line">  */</span></span>
<span class="line"> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ProxySandbox</span> <span class="token keyword">implements</span> <span class="token class-name">SandBox</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">/** window 值变更记录 */</span></span>
<span class="line">   <span class="token keyword">private</span> updatedValueSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span>PropertyKey<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   type<span class="token operator">:</span> SandBoxType<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   proxy<span class="token operator">:</span> WindowProxy<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   globalContext<span class="token operator">:</span> <span class="token keyword">typeof</span> window<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   sandboxRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   latestSetProp<span class="token operator">:</span> PropertyKey <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   <span class="token keyword">private</span> <span class="token function">registerRunningApp</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> proxy<span class="token operator">:</span> Window<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sandboxRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">const</span> currentRunningApp <span class="token operator">=</span> <span class="token function">getCurrentRunningApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentRunningApp <span class="token operator">||</span> currentRunningApp<span class="token punctuation">.</span>name <span class="token operator">!==</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token function">setCurrentRunningApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> window<span class="token operator">:</span> proxy <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line">       <span class="token comment">// FIXME if you have any other good ideas</span></span>
<span class="line">       <span class="token comment">// remove the mark in next tick, thus we can identify whether it in micro app or not</span></span>
<span class="line">       <span class="token comment">// this approach is just a workaround, it could not cover all complex cases, such as the micro app runs in the same task context with master in some case</span></span>
<span class="line">       <span class="token function">nextTask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token function">setCurrentRunningApp</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">   <span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>sandboxRunning<span class="token punctuation">)</span> activeSandboxCount<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>sandboxRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">   <span class="token function">inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[qiankun:sandbox] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> modified global properties restore...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">         <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>updatedValueSet<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>activeSandboxCount <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       variableWhiteList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>proxy<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token comment">// @ts-ignore</span></span>
<span class="line">           <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>globalContext<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>sandboxRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">   <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> globalContext <span class="token operator">=</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>globalContext <span class="token operator">=</span> globalContext<span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> SandBoxType<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">const</span> <span class="token punctuation">{</span> updatedValueSet <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">     <span class="token keyword">const</span> <span class="token punctuation">{</span> fakeWindow<span class="token punctuation">,</span> propertiesWithGetter <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createFakeWindow</span><span class="token punctuation">(</span>globalContext<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">     <span class="token keyword">const</span> descriptorTargetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span>PropertyKey<span class="token punctuation">,</span> SymbolTarget<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">const</span> <span class="token function-variable function">hasOwnProperty</span> <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token operator">:</span> PropertyKey<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fakeWindow<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">||</span> globalContext<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">     <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>fakeWindow<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">       set<span class="token operator">:</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> FakeWindow<span class="token punctuation">,</span> p<span class="token operator">:</span> PropertyKey<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sandboxRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerRunningApp</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">           <span class="token comment">// We must kept its description while the property existed in globalContext before</span></span>
<span class="line">           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> globalContext<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">             <span class="token keyword">const</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>globalContext<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">             <span class="token keyword">const</span> <span class="token punctuation">{</span> writable<span class="token punctuation">,</span> configurable<span class="token punctuation">,</span> enumerable <span class="token punctuation">}</span> <span class="token operator">=</span> descriptor<span class="token operator">!</span><span class="token punctuation">;</span></span>
<span class="line">             <span class="token keyword">if</span> <span class="token punctuation">(</span>writable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">               Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">                 configurable<span class="token punctuation">,</span></span>
<span class="line">                 enumerable<span class="token punctuation">,</span></span>
<span class="line">                 writable<span class="token punctuation">,</span></span>
<span class="line">                 value<span class="token punctuation">,</span></span>
<span class="line">               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">             <span class="token punctuation">}</span></span>
<span class="line">           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">             <span class="token comment">// @ts-ignore</span></span>
<span class="line">             target<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">           <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">           <span class="token keyword">if</span> <span class="token punctuation">(</span>variableWhiteList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">             <span class="token comment">// @ts-ignore</span></span>
<span class="line">             globalContext<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">           <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">           updatedValueSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">           <span class="token keyword">this</span><span class="token punctuation">.</span>latestSetProp <span class="token operator">=</span> p<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">           <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[qiankun] Set window.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>p<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> while sandbox destroyed or inactive in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">         <span class="token comment">// 在 strict-mode 下，Proxy 的 handler.set 返回 false 会抛出 TypeError，在沙箱卸载的情况下应该忽略错误</span></span>
<span class="line">         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">       get<span class="token operator">:</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> FakeWindow<span class="token punctuation">,</span> p<span class="token operator">:</span> PropertyKey<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerRunningApp</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> Symbol<span class="token punctuation">.</span>unscopables<span class="token punctuation">)</span> <span class="token keyword">return</span> unscopables<span class="token punctuation">;</span></span>
<span class="line">         <span class="token comment">// avoid who using window.window or window.self to escape the sandbox environment to touch the really window</span></span>
<span class="line">         <span class="token comment">// see https://github.com/eligrey/FileSaver.js/blob/master/src/FileSaver.js#L13</span></span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token string">&#39;window&#39;</span> <span class="token operator">||</span> p <span class="token operator">===</span> <span class="token string">&#39;self&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token keyword">return</span> proxy<span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">         <span class="token comment">// hijack globalWindow accessing with globalThis keyword</span></span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token string">&#39;globalThis&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token keyword">return</span> proxy<span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span></span>
<span class="line">           p <span class="token operator">===</span> <span class="token string">&#39;top&#39;</span> <span class="token operator">||</span></span>
<span class="line">           p <span class="token operator">===</span> <span class="token string">&#39;parent&#39;</span> <span class="token operator">||</span></span>
<span class="line">           <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;test&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token string">&#39;mockTop&#39;</span> <span class="token operator">||</span> p <span class="token operator">===</span> <span class="token string">&#39;mockSafariTop&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">         <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token comment">// if your master app in an iframe context, allow these props escape the sandbox</span></span>
<span class="line">           <span class="token keyword">if</span> <span class="token punctuation">(</span>globalContext <span class="token operator">===</span> globalContext<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">             <span class="token keyword">return</span> proxy<span class="token punctuation">;</span></span>
<span class="line">           <span class="token punctuation">}</span></span>
<span class="line">           <span class="token keyword">return</span> <span class="token punctuation">(</span>globalContext <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">         <span class="token comment">// proxy.hasOwnProperty would invoke getter firstly, then its value represented as globalContext.hasOwnProperty</span></span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token string">&#39;hasOwnProperty&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token keyword">return</span> hasOwnProperty<span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token string">&#39;document&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token keyword">return</span> document<span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token string">&#39;eval&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token keyword">return</span> eval<span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">         <span class="token keyword">const</span> value <span class="token operator">=</span> propertiesWithGetter<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span></span>
<span class="line">           <span class="token operator">?</span> <span class="token punctuation">(</span>globalContext <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span></span>
<span class="line">           <span class="token operator">:</span> p <span class="token keyword">in</span> target</span>
<span class="line">           <span class="token operator">?</span> <span class="token punctuation">(</span>target <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span></span>
<span class="line">           <span class="token operator">:</span> <span class="token punctuation">(</span>globalContext <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token comment">/* Some dom api must be bound to native window, otherwise it would cause exception like &#39;TypeError: Failed to execute &#39;fetch&#39; on &#39;Window&#39;: Illegal invocation&#39;</span>
<span class="line">            See this code:</span>
<span class="line">              const proxy = new Proxy(window, {});</span>
<span class="line">              const proxyFetch = fetch.bind(proxy);</span>
<span class="line">              proxyFetch(&#39;https://qiankun.com&#39;);</span>
<span class="line">         */</span></span>
<span class="line">         <span class="token keyword">const</span> boundTarget <span class="token operator">=</span> useNativeWindowForBindingsProps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">?</span> nativeGlobal <span class="token operator">:</span> globalContext<span class="token punctuation">;</span></span>
<span class="line">         <span class="token keyword">return</span> <span class="token function">getTargetValue</span><span class="token punctuation">(</span>boundTarget<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">       <span class="token comment">// trap in operator</span></span>
<span class="line">       <span class="token comment">// see https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/constants.js#L12</span></span>
<span class="line">       <span class="token function">has</span><span class="token punctuation">(</span>target<span class="token operator">:</span> FakeWindow<span class="token punctuation">,</span> p<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">return</span> p <span class="token keyword">in</span> unscopables <span class="token operator">||</span> p <span class="token keyword">in</span> target <span class="token operator">||</span> p <span class="token keyword">in</span> globalContext<span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">       <span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>target<span class="token operator">:</span> FakeWindow<span class="token punctuation">,</span> p<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token operator">:</span> PropertyDescriptor <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token comment">/*</span>
<span class="line">          as the descriptor of top/self/window/mockTop in raw window are configurable but not in proxy target, we need to get it from target to avoid TypeError</span>
<span class="line">          see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor</span>
<span class="line">          &gt; A property cannot be reported as non-configurable, if it does not exists as an own property of the target object or if it exists as a configurable own property of the target object.</span>
<span class="line">          */</span></span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token keyword">const</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">           descriptorTargetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">&#39;target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">           <span class="token keyword">return</span> descriptor<span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span>globalContext<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token keyword">const</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>globalContext<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">           descriptorTargetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">&#39;globalContext&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">           <span class="token comment">// A property cannot be reported as non-configurable, if it does not exists as an own property of the target object</span></span>
<span class="line">           <span class="token keyword">if</span> <span class="token punctuation">(</span>descriptor <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>descriptor<span class="token punctuation">.</span>configurable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">             descriptor<span class="token punctuation">.</span>configurable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">           <span class="token punctuation">}</span></span>
<span class="line">           <span class="token keyword">return</span> descriptor<span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">         <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">       <span class="token comment">// trap to support iterator with sandbox</span></span>
<span class="line">       <span class="token function">ownKeys</span><span class="token punctuation">(</span>target<span class="token operator">:</span> FakeWindow<span class="token punctuation">)</span><span class="token operator">:</span> ArrayLike<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">return</span> <span class="token function">uniq</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>globalContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">       <span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token operator">:</span> Window<span class="token punctuation">,</span> p<span class="token operator">:</span> PropertyKey<span class="token punctuation">,</span> attributes<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">const</span> from <span class="token operator">=</span> descriptorTargetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token comment">/*</span>
<span class="line">          Descriptor must be defined to native window while it comes from native window via Object.getOwnPropertyDescriptor(window, p),</span>
<span class="line">          otherwise it would cause a TypeError with illegal invocation.</span>
<span class="line">          */</span></span>
<span class="line">         <span class="token keyword">switch</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token keyword">case</span> <span class="token string">&#39;globalContext&#39;</span><span class="token operator">:</span></span>
<span class="line">             <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>globalContext<span class="token punctuation">,</span> p<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">           <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">             <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> p<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">       deleteProperty<span class="token operator">:</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> FakeWindow<span class="token punctuation">,</span> p<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerRunningApp</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token comment">// @ts-ignore</span></span>
<span class="line">           <span class="token keyword">delete</span> target<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">           updatedValueSet<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">           <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">       <span class="token comment">// makes sure \`window instanceof Window\` returns truthy in micro app</span></span>
<span class="line">       <span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>globalContext<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>proxy <span class="token operator">=</span> proxy<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">     activeSandboxCount<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是ProxySandbox的全部源码，我拿其中一个细节聊一聊吧。里面有一个uniq方法，我单独放在下面。filter的第1个参数是一个函数，第二个参数是一个对象。具体参数的含义可以查阅相关文档。这里之所以提出来，就是里面巧妙的运用了这个this。通过在this上设置属性，并以之为条件来实现去重功能。另外关于这个this，会发现function filter(this: PropertyKey[], element) 第一个参数是this，正常在javascript这是会运行出错的，其实出现在这里仅仅是typescript用作类型推断，编译后应该是没有这个参数的，所以我们可以认为这里的第一个参数就是element，我在第一次阅读到这里的时候因为对这个typescript的小语法点不清楚，疑惑了好一会查文档才搞清楚。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">/**</span>
<span class="line"> * fastest(at most time) unique array method</span>
<span class="line"> * @see https://jsperf.com/array-filter-unique/30</span>
<span class="line"> */</span></span>
<span class="line"> <span class="token keyword">function</span> <span class="token function">uniq</span><span class="token punctuation">(</span>array<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> PropertyKey<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> element <span class="token keyword">in</span> <span class="token keyword">this</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">[</span>element<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35)])])}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/%E5%BE%AE%E5%89%8D%E7%AB%AF/qiankun/%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/1.%E4%B9%BE%E5%9D%A4%E7%9A%84%E6%B2%99%E7%AE%B1%E9%9A%94%E7%A6%BB%E6%9C%BA%E5%88%B6.html","title":"1.乾坤的沙箱隔离机制","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"微前端/qiankun/原理探究/1.乾坤的沙箱隔离机制.md"}');export{i as comp,u as data};
