import{_ as s,c as a,a as e,o as t}from"./app-D8HvJIFE.js";const p={};function c(o,n){return t(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="react18中useeffect执行两次问题" tabindex="-1"><a class="header-anchor" href="#react18中useeffect执行两次问题"><span>react18中useEffect执行两次问题</span></a></h1><p>严格模式(Strict Mode) 什么是严格模式 strict mode就是一个工具，用来检查应用中可能存在的问题。 严格模式只会在开发环境下运行，在生产环境下它是没有影响的。</p><p>为了让开发者不要忽视useEffect的清除函数的重要性，所以React将Effect设置成执行两次，就是为了让问题提前暴露出来。React还认为Effect执行两次在大部分情况下是没有问题的</p><p>非严格模式</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">*</span> React mounts the component<span class="token punctuation">.</span> <span class="token comment">//挂载组件</span></span>
<span class="line">  <span class="token operator">*</span> Layout effects are created<span class="token punctuation">.</span> <span class="token comment">//layout执行</span></span>
<span class="line">  <span class="token operator">*</span> Effects are created<span class="token punctuation">.</span> <span class="token comment">//Effects执行</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>严格模式</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">*</span> React mounts the component<span class="token punctuation">.</span> <span class="token comment">//挂载组件</span></span>
<span class="line">    <span class="token operator">*</span> Layout effects are created<span class="token punctuation">.</span> <span class="token comment">//layout执行</span></span>
<span class="line">    <span class="token operator">*</span> Effect effects are created<span class="token punctuation">.</span> <span class="token comment">// Effects执行</span></span>
<span class="line"><span class="token operator">*</span> React simulates effects being destroyed on a mounted component<span class="token punctuation">.</span> <span class="token comment">//React模拟组件销毁</span></span>
<span class="line">    <span class="token operator">*</span> Layout effects are destroyed<span class="token punctuation">.</span> <span class="token comment">// layout销毁</span></span>
<span class="line">    <span class="token operator">*</span> Effects are destroyed<span class="token punctuation">.</span>       <span class="token comment">// Effects销毁</span></span>
<span class="line"><span class="token operator">*</span> React simulates effects being re<span class="token operator">-</span>created on a mounted component<span class="token punctuation">.</span> <span class="token comment">// React模拟重新挂载</span></span>
<span class="line">    <span class="token operator">*</span> Layout effects are created  <span class="token comment">// layout重新创建</span></span>
<span class="line">    <span class="token operator">*</span> Effect setup code runs     <span class="token comment">//  Effect重新执行</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何在应用中处理Effect执行两次的问题 React认为执行两次在大多数情况下并没有有什么影响，我们应该考虑的是在重新挂载之后，如何让Effect正确的执行，而不是怎么才能让Effect执行一次。下面我们看些优化的场景。</p><h2 id="请求数据" tabindex="-1"><a class="header-anchor" href="#请求数据"><span>请求数据</span></a></h2><p>我们可以通过一个变量来控制请求的时候只发出去一次，也可以通过取消请求的方式来进行改善。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">let</span> ignore <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">startFetching</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchTodos</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">            <span class="token function">setTodos</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line">    <span class="token function">startFetching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  </span>
<span class="line">       ignore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="弹窗问题" tabindex="-1"><a class="header-anchor" href="#弹窗问题"><span>弹窗问题</span></a></h2><p>在第二次挂载之前，将弹窗close掉，就不会有两次调用showModal()的问题了</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">const</span> dialog <span class="token operator">=</span> dialogRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span>  </span>
<span class="line">    dialog<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> dialog<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="not-an-effect-buying-a-product" tabindex="-1"><a class="header-anchor" href="#not-an-effect-buying-a-product"><span>Not an Effect: Buying a product</span></a></h2><p>不知道标题怎么翻译比较合适，直接拿过来用吧</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/buy&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>React认为在useEffect里面发送post请求是不正确的，这种需求场景是不存在的。你应该是在点击事件中发送某个post请求，而不是直接在useEffect里面。</p><h2 id="settimeout" tabindex="-1"><a class="header-anchor" href="#settimeout"><span>setTimeout</span></a></h2><p>记得在useEffect里面取消定时器</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">onTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;⏰ &#39;</span> <span class="token operator">+</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;⏰  Schedule &quot;&#39;</span> <span class="token operator">+</span> text <span class="token operator">+</span> <span class="token string">&#39;&quot; log&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>onTimeout<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;⏰  Cancel &quot;&#39;</span> <span class="token operator">+</span> text <span class="token operator">+</span> <span class="token string">&#39;&quot; log&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>text<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21)])])}const i=s(p,[["render",c]]),u=JSON.parse('{"path":"/react/react18%E4%B8%ADuseEffect%E6%89%A7%E8%A1%8C%E4%B8%A4%E6%AC%A1%E9%97%AE%E9%A2%98.html","title":"react18中useEffect执行两次问题","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"react/react18中useEffect执行两次问题.md"}');export{i as comp,u as data};
