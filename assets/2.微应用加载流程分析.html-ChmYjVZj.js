import{_ as s,c as a,a as p,o as t}from"./app-D8HvJIFE.js";const e={};function o(c,n){return t(),a("div",null,[...n[0]||(n[0]=[p(`<h1 id="_2-微应用加载流程分析" tabindex="-1"><a class="header-anchor" href="#_2-微应用加载流程分析"><span>2.微应用加载流程分析</span></a></h1><h2 id="乾坤的微应用加载流程分析-从微应用的注册到loadapp方法内部实现" tabindex="-1"><a class="header-anchor" href="#乾坤的微应用加载流程分析-从微应用的注册到loadapp方法内部实现"><span>乾坤的微应用加载流程分析(从微应用的注册到loadApp方法内部实现)</span></a></h2><p>乾坤的微应用加载流程主要触发场景包括下面四个：</p><blockquote><p>通过registerMicroApps注册微应用 通过loadMicroApp手动加载微应用 调用start时触发了预加载逻辑 手动调用prefetchApps执行预加载</p></blockquote><p>其实不管通过什么场景触发微应用加载逻辑，进行微应用加载本身的执行方法都只有一个，那就是位于src/loaser.ts文件中的loadApp方法。为了方便大家理解，认识微应用加载逻辑在乾坤中的位置，我将主要触发场景列在上面，关于上面列出的方法，都是乾坤暴露出来的api，可以在乾坤文档上查阅到相关用途。本文会以具体的乾坤微应用的注册流程开始，进而引出loadApp方法中的实现细节。在介绍loadApp实现细节的过程中，我会先分析乾坤加载微应用的主体流程和关键环节。在大家对主流程了解的基础上，将其中需要注意的关键点，分成多个小节进行介绍。但对于一些内容可能会比较多的细节，我们会再用新的文章来进行详细分析。比如在微前端01 : 乾坤的Js隔离机制原理剖析（快照沙箱、两种代理沙箱）提到的三种沙箱，我们当时分析了其核心原理，但它们是如何在乾坤中的发挥作用的当时并没有提及，虽然微应用加载流程和沙箱机制有比较强的关联，但该部分内容又相对较多，所以我们会在后续的文章中结合沙箱相关代码和加载流程相关代码进行详细介绍。具体内容请见下文。</p><h4 id="乾坤的微应用注册流程" tabindex="-1"><a class="header-anchor" href="#乾坤的微应用注册流程"><span>乾坤的微应用注册流程</span></a></h4><ol><li>筛选出未注册微应用（registerMicroApps 的第一个参数将要注册的微应用列表，其中包含已经注册过的微应用，一个微应用只需要注册一次）</li><li>记录已经注册的微应用</li><li>循环遍历，传入四个参数，逐个注册</li><li>在single-spa 中执行注册方法</li><li>执行乾坤注册时候传入第二个参数（第二个参数是一个函数，就是上面提到的加载方法，这个方法的意义就是获取微应用的各种资源，并对资源进行加工，然后返回微应用暴露的生命周期）</li><li>接收函数执行后的返回值并保存 分别对应流程图中的第4步和第5步：</li></ol><p>微应用的注册，实际上发生在single-spa中 子应用暴露的生命周期函数，由乾坤提供的函数参数返回</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> registerMicroApps<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ObjectType</span><span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token literal-property property">apps</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RegistrableApp<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  lifeCycles<span class="token operator">?</span><span class="token operator">:</span> FrameworkLifeCycles<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Each app only needs to be registered once</span></span>
<span class="line">  <span class="token keyword">const</span> unregisteredApps <span class="token operator">=</span> apps<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>microApps<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">registeredApp</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> registeredApp<span class="token punctuation">.</span>name <span class="token operator">===</span> app<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  microApps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>microApps<span class="token punctuation">,</span> <span class="token operator">...</span>unregisteredApps<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  unregisteredApps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> activeRule<span class="token punctuation">,</span> loader <span class="token operator">=</span> noop<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token operator">...</span>appConfig <span class="token punctuation">}</span> <span class="token operator">=</span> app<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">registerApplication</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      name<span class="token punctuation">,</span></span>
<span class="line">      <span class="token function-variable function">app</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">loader</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">await</span> frameworkStartedDefer<span class="token punctuation">.</span>promise<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">{</span> mount<span class="token punctuation">,</span> <span class="token operator">...</span>otherMicroAppConfigs <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token keyword">await</span> <span class="token function">loadApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token operator">...</span>appConfig <span class="token punctuation">}</span><span class="token punctuation">,</span> frameworkConfiguration<span class="token punctuation">,</span> lifeCycles<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">mount</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">toArray</span><span class="token punctuation">(</span>mount<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token operator">...</span>otherMicroAppConfigs<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">activeWhen</span><span class="token operator">:</span> activeRule<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">customProps</span><span class="token operator">:</span> props<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 简化一下</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 代码片段一，所属文件: src/apis.ts</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> registerMicroApps<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ObjectType</span><span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token literal-property property">apps</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RegistrableApp<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  lifeCycles<span class="token operator">?</span><span class="token operator">:</span> FrameworkLifeCycles<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 这里省略了其他代码...</span></span>
<span class="line">  unregisteredApps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> activeRule<span class="token punctuation">,</span> loader <span class="token operator">=</span> noop<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token operator">...</span>appConfig <span class="token punctuation">}</span> <span class="token operator">=</span> app<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">registerApplication</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//关键点1</span></span>
<span class="line">      name<span class="token punctuation">,</span></span>
<span class="line">      <span class="token function-variable function">app</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">// 关键点2</span></span>
<span class="line">        <span class="token comment">// 这里省略了其他代码...</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">{</span> mount<span class="token punctuation">,</span> <span class="token operator">...</span>otherMicroAppConfigs <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token comment">// 关键点4</span></span>
<span class="line">          <span class="token keyword">await</span> <span class="token function">loadApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token operator">...</span>appConfig <span class="token punctuation">}</span><span class="token punctuation">,</span> frameworkConfiguration<span class="token punctuation">,</span> lifeCycles<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token comment">// 关键点3</span></span>
<span class="line">          <span class="token literal-property property">mount</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">toArray</span><span class="token punctuation">(</span>mount<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token operator">...</span>otherMicroAppConfigs<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">activeWhen</span><span class="token operator">:</span> activeRule<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">customProps</span><span class="token operator">:</span> props<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们先了解上面代码片段中的一些关键信息：</p><p>从上面代码片段中的关键点1处可以直观的看出，真正发起注册微应用的方法是registerApplication方法，而该方法是从single-spa中导入的。</p><p>关于微应用加载函数的返回值 上面代码片段中注释关键点2处指示的微应用加载函数，对应了流程图中的第5步，最核心的逻辑是代码注释关键点4所指示的loadApp方法。上文流程图中的第5步，对应上文代码片段中的关键点3。当关键点2处的app方法执行，返回了关键点3处的对象，该对象包括了mount、name、bootstrap、unmount等属性，这些属性其实就是single-spa注册微应用时候所需要的内容，因为single-spa中所谓的注册微应用，本质上就是获取微应用暴露的相关生命周期方法，在后续程序运转过程中，通过控制这些生命周期方法，进而实现对微应用的控制。</p><p>接下来，我们就把目光投向loadApp内部中去，微应用的加载，核心逻辑都在这里</p><h1 id="loadapp的内部实现" tabindex="-1"><a class="header-anchor" href="#loadapp的内部实现"><span>loadApp的内部实现</span></a></h1><p>loadApp的主体流程 请先简单看一下流程：</p><ol><li>从参数中获取微应用的entry和name</li><li>根据名称生成微应用的实例id</li><li>根据entry和传入的参数获取微应用的资源，资源获取：template（html css相关），execScript（js 相关），assetPublicPath（页面内远程资源访问相对路径）</li><li>template 外包裹一个div 并在div 上设置一些与实例id相关的属性，作为微应用的根元素，称之为appContent，此时appContent仍然是一个字符串。</li><li>将appContent 处理成HTML元素，称之为initialAppWrapperElement</li><li>将initialAppWrapperElement 挂载到节点 （注册微应用时候对微应用设置的挂载容器节点）</li><li>构造生命周期方法数组 beforeUnmount，afterUnmount，afterMount，beforeMount，beforeLoad</li><li>依次执行beforeLoad数组中的所有方法</li><li>执行步骤03中获取的execScript函数，并获取其中暴露出来的方法 boostrap，mount，unmount等重要属性</li><li>声明函数parcelConfigGetter，该函数会返回一个对象，对象中包括 name，boostrap，mount，unmount 等重要属性</li><li>返回函数parcelConfigGetter，此时loadApp方法执行完成。</li></ol><p>loadApp内部逻辑比较复杂，在忽略一些细节的情况下，大家要明白loadApp的核心功能：那就是获取微应用的js/css/html等资源，并对这些资源进行加工，随后会构造和执行一生命周期中需要执行的方法，最终返回一个函数，而这个函数的返回值是一个对象，该对象包括了微应用的生命周期方法。有了这个最基本的认识，我们就可以进行下面的详细解读了。</p><p>loadApp中值得关注的细节 关于获取微应用资源的方法 关于微应用资源的获取，对应流程中的第3步，具体功能实现依赖了库import-html-entry中的importEntry函数，这个函数解决了两个问题，一是如何把资源获取到本地，二是如何将这些进行恰当处理以满足实际需要。调用该函数的对应代码如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">  <span class="token comment">// 代码片段二，对应文件：src/loader.ts</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> template<span class="token punctuation">,</span> execScripts<span class="token punctuation">,</span> assetPublicPath <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">importEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> importEntryOpts<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/**</span>
<span class="line">   * 先对这几个变量有个简单的了解，后续在合适的地方会详细介绍</span>
<span class="line">   * template: 一个字符串，内部包含了html、css资源</span>
<span class="line">   * execScripts：一个函数，执行该函数后会返回一个对象</span>
<span class="line">   * assetPublicPath：访问页面远程资源的相对路径</span>
<span class="line">   * /</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将获取到的template(涉及html/css)转化成DOM节点 代码片段二中我们提到，template是一个字符串，为什么是一个字符串呢，其实很简单，资源以字节流的形式从网络上到达本地后只能转化成字符串进行处理。我们这里需要把字符串转化成具体可用的Dom节点。那怎么转化？具体代码涉及两部分：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// 代码片段三，对应文件：src/loader.ts</span></span>
<span class="line"><span class="token keyword">const</span> appContent <span class="token operator">=</span> <span class="token function">getDefaultTplWrapper</span><span class="token punctuation">(</span>appInstanceId<span class="token punctuation">)</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> initialAppWrapperElement<span class="token operator">:</span> HTMLElement <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span></span>
<span class="line">    appContent<span class="token punctuation">,</span></span>
<span class="line">    strictStyleIsolation<span class="token punctuation">,</span></span>
<span class="line">    scopedCSS<span class="token punctuation">,</span></span>
<span class="line">    appInstanceId<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// 代码片段四，对应文件：src/utils.ts</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getDefaultTplWrapper</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>tpl<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div id=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getWrapperId</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; data-name=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; data-version=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tpl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段三中的appContent对应流程中第4步提到的appContent。代码片段中三中的initialAppWrapperElement就是流程图中第5步提到的DOM元素initialAppWrapperElement。从代码中可以看出，函数getDefaultTplWrapper中对获取到的template外层包裹一个div，在该div上设置id、data-name、data-version等属性。 为什么要包裹这样一个标签呢？ 有两个好处，第一是能够保证template转化为DOM节点后的根节点只有一个，这样将来对微应用挂载、卸载等操作的时候能够保证准确性； 第二是在该标签上设置具有标识性的属性，可以避免与微应用原有的根元素上的属性冲突。</p><p>接下来，我们如何将字符串appContent转化成DOM节点initialAppWrapperElement呢，这有赖于片段三中的所示的createElement方法，该方法代码如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 代码片段四，所属文件：src/loader.ts</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token parameter"><span class="token literal-property property">appContent</span><span class="token operator">:</span> string<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">strictStyleIsolation</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">scopedCSS</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">appInstanceId</span><span class="token operator">:</span> string<span class="token punctuation">,</span></span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> HTMLElement <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> containerElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  containerElement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> appContent<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// appContent always wrapped with a singular div</span></span>
<span class="line">  <span class="token keyword">const</span> appElement <span class="token operator">=</span> containerElement<span class="token punctuation">.</span>firstChild <span class="token keyword">as</span> HTMLElement<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 省略了其他代码...</span></span>
<span class="line">  <span class="token keyword">return</span> appElement<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段四中的关键是，先创建一个空div，名为containerElement，然后将其内容设置为上文提到的appContent，再获取containerElement的第一个子元素，作为将要返回的DOM元素，当然还需要对这个DOM元素进行一些处理，这里省略了相关代码。这样做有什么作用呢，看见上面的那行注释appContent always wrapped with a singular div。其实就是如果appContent有多个根节点，那么这里只会获取和应用第一个节点。如果在日常代码编写过程中有相同的场景，我认为可以直接复用这三行代码。</p><h3 id="css资源的处理和隔离方法" tabindex="-1"><a class="header-anchor" href="#css资源的处理和隔离方法"><span>css资源的处理和隔离方法</span></a></h3><p>代码片段四中省略了下面这几行代码。这几行代码的作用是对appElement中的style进行处理</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>scopedCSS<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> attr <span class="token operator">=</span> appElement<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>css<span class="token punctuation">.</span>QiankunCSSRewriteAttr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>attr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      appElement<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>css<span class="token punctuation">.</span>QiankunCSSRewriteAttr<span class="token punctuation">,</span> appInstanceId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> styleNodes <span class="token operator">=</span> appElement<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">forEach</span><span class="token punctuation">(</span>styleNodes<span class="token punctuation">,</span> <span class="token punctuation">(</span>stylesheetElement<span class="token operator">:</span> HTMLStyleElement<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      css<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>appElement<span class="token operator">!</span><span class="token punctuation">,</span> stylesheetElement<span class="token punctuation">,</span> appInstanceId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于shadow dom的陷阱 其实在代码片段四中还省略了下面几行代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>strictStyleIsolation<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>supportShadowDOM<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&#39;[qiankun]: As current browser not support shadow dom, your strictStyleIsolation configuration will be ignored!&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">{</span> innerHTML <span class="token punctuation">}</span> <span class="token operator">=</span> appElement<span class="token punctuation">;</span></span>
<span class="line">      appElement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> <span class="token literal-property property">shadow</span><span class="token operator">:</span> ShadowRoot<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>appElement<span class="token punctuation">.</span>attachShadow<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        shadow <span class="token operator">=</span> appElement<span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// createShadowRoot was proposed in initial spec, which has then been deprecated</span></span>
<span class="line">        shadow <span class="token operator">=</span> <span class="token punctuation">(</span>appElement <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createShadowRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      shadow<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> innerHTML<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这几行代码的主要功能，就是如果是严格的样式隔离，那么就判断当前环境是否支持shadow dom，在支持shadow dom的情况下，则将元素绑定到shadow dom上。shadow dom虽然可以做到很好的隔离，但是有个问题需要大家关注。那就是元素在shadow dom中是自治的，外界无法影响。但如果该元素挂载到了shadow dom外部，则无法正常运行。比如React中的很多弹框，都是直接挂载到body上的，那这种情况下就要采取措施进行规避。乾坤在关于start方法到api文档中提到了下面内容：</p><p>基于 ShadowDOM 的严格样式隔离并不是一个可以无脑使用的方案，大部分情况下都需要接入应用做一些适配后才能正常在 ShadowDOM 中运行起来</p><p>关于函数initialAppWrapperGetter 该函数存在于，流程图的第6步和第7步之间。朋友们有没有觉得奇怪，我们上文已经得到了微应用的DOM元素initialAppWrapperElement，为什么又出现一个函数来获取微应用的DOM元素？</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 代码片段五，所属文件：src/loader.ts</span></span>
<span class="line">  <span class="token keyword">const</span> initialAppWrapperGetter <span class="token operator">=</span> <span class="token function">getAppWrapperGetter</span><span class="token punctuation">(</span></span>
<span class="line">    appInstanceId<span class="token punctuation">,</span></span>
<span class="line">    <span class="token operator">!</span><span class="token operator">!</span>legacyRender<span class="token punctuation">,</span></span>
<span class="line">    strictStyleIsolation<span class="token punctuation">,</span></span>
<span class="line">    scopedCSS<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> initialAppWrapperElement<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token doc-comment comment">/** generate app wrapper dom getter */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getAppWrapperGetter</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token literal-property property">appInstanceId</span><span class="token operator">:</span> string<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">useLegacyRender</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">strictStyleIsolation</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">scopedCSS</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">elementGetter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> HTMLElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>useLegacyRender<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 省略一些代码...</span></span>
<span class="line">      <span class="token keyword">const</span> appWrapper <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token function">getWrapperId</span><span class="token punctuation">(</span>appInstanceId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 省略一些代码...</span></span>
<span class="line">      <span class="token keyword">return</span> appWrapper<span class="token operator">!</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">elementGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 省略一些代码</span></span>
<span class="line">    <span class="token keyword">return</span> element<span class="token operator">!</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的代码片段五中，我们其实可以看到之所以存在这个getAppWrapperGetter方法，是为了兼容过去可以自定义渲染函数的机制，这里我们先不提这个渲染机制，可以简单理解为把一个DOM节点挂载到某个DOM节点上。这也提醒我们，在设计一个系统的时候一定要慎重，否则为了兼容低版本能正常运行，而不得不经常做一些类似的兼容措施。如果乾坤一开始就没有设计这个legacyRender这种机制，那么getAppWrapperGetter也就没有存在的必要，整个系统的程序可读性和易用性都会提升。当然乾坤作为一个优秀的微前端框架，也是逐步在发展进化，兼容低版本的行为难以避免。</p><h3 id="沙箱机制的应用" tabindex="-1"><a class="header-anchor" href="#沙箱机制的应用"><span>沙箱机制的应用</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// 代码片段六，所属文件：src/loader.ts</span></span>
<span class="line"><span class="token keyword">let</span> global <span class="token operator">=</span> globalContext<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> <span class="token function-variable function">mountSandbox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> <span class="token function-variable function">unmountSandbox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> useLooseSandbox <span class="token operator">=</span> <span class="token keyword">typeof</span> sandbox <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>sandbox<span class="token punctuation">.</span>loose<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> sandboxContainer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>sandbox<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    sandboxContainer <span class="token operator">=</span> <span class="token function">createSandboxContainer</span><span class="token punctuation">(</span></span>
<span class="line">      appInstanceId<span class="token punctuation">,</span></span>
<span class="line">      <span class="token comment">// FIXME should use a strict sandbox logic while remount, see https://github.com/umijs/qiankun/issues/518</span></span>
<span class="line">      initialAppWrapperGetter<span class="token punctuation">,</span></span>
<span class="line">      scopedCSS<span class="token punctuation">,</span></span>
<span class="line">      useLooseSandbox<span class="token punctuation">,</span></span>
<span class="line">      excludeAssetFilter<span class="token punctuation">,</span></span>
<span class="line">      global<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    global <span class="token operator">=</span> sandboxContainer<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>proxy <span class="token keyword">as</span> <span class="token keyword">typeof</span> window<span class="token punctuation">;</span></span>
<span class="line">    mountSandbox <span class="token operator">=</span> sandboxContainer<span class="token punctuation">.</span>mount<span class="token punctuation">;</span></span>
<span class="line">    unmountSandbox <span class="token operator">=</span> sandboxContainer<span class="token punctuation">.</span>unmount<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这部分代码在流程图中第6步和第7步之间。我认为里面最核心的那行代码是global = sandboxContainer.instance.proxy as typeof window;，因为后续该微应用中进行的操作，都是这个沙箱容器中的沙箱代理对象在发挥作用。</p><p>一些生命周期中需要执行的函数</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 代码片段七，所属文件：src/loader.ts</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">  beforeUnmount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  afterUnmount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  afterMount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  beforeMount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  beforeLoad <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">mergeWith</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAddOns</span><span class="token punctuation">(</span>global<span class="token punctuation">,</span> assetPublicPath<span class="token punctuation">)</span><span class="token punctuation">,</span> lifeCycles<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v1<span class="token punctuation">,</span> v2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">concat</span><span class="token punctuation">(</span>v1 <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v2 <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段七，对应流程中的第7步，这些数组对象beforeUnmount、afterUnmount、afterMount、beforeMount、beforeLoad中会保存很多函数，这些函数会放到某些合适的时机去执行。那什么是合适的时机呢？上文我们提到过，微应用会暴露生命周期方法，single-spa会通过调用这些生命周期方法来控制微应用的状态。代码片段七中的这些方法，就会放到生命周期方法中去</p><p>关于数组的reduce方法的妙用：execHooksChain 代码片段七执行完后，紧接着有一行代码：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">await</span> <span class="token function">execHooksChain</span><span class="token punctuation">(</span><span class="token function">toArray</span><span class="token punctuation">(</span>beforeLoad<span class="token punctuation">)</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">我们先不关心beforeLoad中具体有哪些方法，具体有哪些方法由代码片段七决定。我们现在只看execHooksChain这个函数：</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 代码片段八，所属文件：src/loader.ts</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">execHooksChain</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> ObjectType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">  hooks<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>LifeCycleFn<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  app<span class="token operator">:</span> LoadableApp<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  global <span class="token operator">=</span> window<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>hooks<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> hooks<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> hook<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">hook</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里巧妙的利用了数组的reduce函数，试想如果不这样写应该怎么做实现相同的功能呢，我想应该是这样：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 代码片段九</span></span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hooks<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">await</span> hooks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>微应用加载完成后的返回值 微应用加载流程执行完成返回的是一个函数，如代码所示：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">  <span class="token keyword">const</span> <span class="token literal-property property">parcelConfigGetter</span><span class="token operator">:</span> <span class="token function-variable function">ParcelConfigObjectGetter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">remountContainer <span class="token operator">=</span> initialContainer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 省略相关代码</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token literal-property property">parcelConfig</span><span class="token operator">:</span> ParcelConfigObject <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 省略相关代码</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> parcelConfig<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可能第一反应是，既然加载完成了，为什么不直接返回相关内容，反而返回一个函数呢？其实答案就在这个函数的参数remountContainer里面，因为这个返回的对象实际上就是single-spa需要的微应用暴露的的生命周期函数。我们知道微应用的生命周期方法中有mount，我们的微应用最终要挂载到某个地方去，正常情况下就是用户注册微应用时候传入的container参数。但是如果注册完成后，微应用需要挂载到别的地方去怎么办呢，因此这里返回值就是一个函数，而非直接返回对象。</p><p>parcelConfigGetter的返回对象</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> parcelConfig<span class="token operator">:</span> ParcelConfigObject <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      name<span class="token operator">:</span> appInstanceId<span class="token punctuation">,</span></span>
<span class="line">      bootstrap<span class="token punctuation">,</span></span>
<span class="line">      mount<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> marks <span class="token operator">=</span> <span class="token function">performanceGetEntriesByName</span><span class="token punctuation">(</span>markName<span class="token punctuation">,</span> <span class="token string">&#39;mark&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// mark length is zero means the app is remounting</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>marks <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>marks<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">performanceMark</span><span class="token punctuation">(</span>markName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">validateSingularMode</span><span class="token punctuation">(</span>singular<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> prevAppUnmountedDeferred<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> prevAppUnmountedDeferred<span class="token punctuation">.</span>promise<span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">          <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// initial wrapper element before app mount/remount</span></span>
<span class="line">        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          appWrapperElement <span class="token operator">=</span> initialAppWrapperElement<span class="token punctuation">;</span></span>
<span class="line">          appWrapperGetter <span class="token operator">=</span> <span class="token function">getAppWrapperGetter</span><span class="token punctuation">(</span></span>
<span class="line">            appInstanceId<span class="token punctuation">,</span></span>
<span class="line">            <span class="token operator">!</span><span class="token operator">!</span>legacyRender<span class="token punctuation">,</span></span>
<span class="line">            strictStyleIsolation<span class="token punctuation">,</span></span>
<span class="line">            scopedCSS<span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> appWrapperElement<span class="token punctuation">,</span></span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// 添加 mount hook, 确保每次应用加载前容器 dom 结构已经设置完毕</span></span>
<span class="line">        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">const</span> useNewContainer <span class="token operator">=</span> remountContainer <span class="token operator">!==</span> initialContainer<span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>useNewContainer <span class="token operator">||</span> <span class="token operator">!</span>appWrapperElement<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// element will be destroyed after unmounted, we need to recreate it if it not exist</span></span>
<span class="line">            <span class="token comment">// or we try to remount into a new container</span></span>
<span class="line">            appWrapperElement <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>appContent<span class="token punctuation">,</span> strictStyleIsolation<span class="token punctuation">,</span> scopedCSS<span class="token punctuation">,</span> appInstanceId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">syncAppWrapperElement2Sandbox</span><span class="token punctuation">(</span>appWrapperElement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">          <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> element<span class="token operator">:</span> appWrapperElement<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> container<span class="token operator">:</span> remountContainer <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;mounting&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        mountSandbox<span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// exec the chain after rendering to keep the behavior with beforeLoad</span></span>
<span class="line">        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">execHooksChain</span><span class="token punctuation">(</span><span class="token function">toArray</span><span class="token punctuation">(</span>beforeMount<span class="token punctuation">)</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">async</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> container<span class="token operator">:</span> <span class="token function">appWrapperGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> setGlobalState<span class="token punctuation">,</span> onGlobalStateChange <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// finish loading after app mounted</span></span>
<span class="line">        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> element<span class="token operator">:</span> appWrapperElement<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> container<span class="token operator">:</span> remountContainer <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;mounted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">execHooksChain</span><span class="token punctuation">(</span><span class="token function">toArray</span><span class="token punctuation">(</span>afterMount<span class="token punctuation">)</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// initialize the unmount defer after app mounted and resolve the defer after it unmounted</span></span>
<span class="line">        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">validateSingularMode</span><span class="token punctuation">(</span>singular<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            prevAppUnmountedDeferred <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Deferred<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> measureName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[qiankun] App </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>appInstanceId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> Loading Consuming</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">performanceMeasure</span><span class="token punctuation">(</span>measureName<span class="token punctuation">,</span> markName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      unmount<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">execHooksChain</span><span class="token punctuation">(</span><span class="token function">toArray</span><span class="token punctuation">(</span>beforeUnmount<span class="token punctuation">)</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">async</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> container<span class="token operator">:</span> <span class="token function">appWrapperGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        unmountSandbox<span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">execHooksChain</span><span class="token punctuation">(</span><span class="token function">toArray</span><span class="token punctuation">(</span>afterUnmount<span class="token punctuation">)</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> element<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> container<span class="token operator">:</span> remountContainer <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;unmounted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token function">offGlobalStateChange</span><span class="token punctuation">(</span>appInstanceId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// for gc</span></span>
<span class="line">          appWrapperElement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token function">syncAppWrapperElement2Sandbox</span><span class="token punctuation">(</span>appWrapperElement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">validateSingularMode</span><span class="token punctuation">(</span>singular<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> prevAppUnmountedDeferred<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            prevAppUnmountedDeferred<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会发现这个返回的对象有很多内容，但是我们可以从宏观的视角来看，该对象只有4个属性，name、bootstrap、mount、unmount，没错这正是single-spa需要微应用暴露的生命周期函数。后续就是通过执行对应生命周期函数而控制微应用。因为这里相当于微应用加载的最终结果，汇聚了大量其他逻辑产生了这样一个结果对象。我不打算立即对这些函数进行逐一解析，因为内容比较零碎，如果逐一讲解不利于大家理解。所以后续文章会先逐个介绍本文尚未详细介绍的部分，在比较全面的了解乾坤后，我们会深入到single-spa，那时候会用到这些方法，我们再找合适的机会来详细讲解这里的众多方法。</p><p>关于Promise的妙用：Deferred 此时loadApp已经执行完成，返回了一个函数parcelConfigGetter，我们把视野移动到调用loadApp的地方，也就是本文的代码片段一。但代码片段一省略了我现在要讲的代码，请看这里：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">registerApplication</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      name<span class="token punctuation">,</span></span>
<span class="line">      <span class="token function-variable function">app</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 省略代码...</span></span>
<span class="line">        <span class="token keyword">await</span> frameworkStartedDefer<span class="token punctuation">.</span>promise<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">{</span> mount<span class="token punctuation">,</span> <span class="token operator">...</span>otherMicroAppConfigs <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token keyword">await</span> <span class="token function">loadApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token operator">...</span>appConfig <span class="token punctuation">}</span><span class="token punctuation">,</span> frameworkConfiguration<span class="token punctuation">,</span> lifeCycles<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 省略代码....</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">有没有觉得有行代码很奇怪，那就是<span class="token keyword">await</span> frameworkStartedDefer<span class="token punctuation">.</span>promise<span class="token punctuation">;</span>，其实这行代码是与下面的代码片段配合使用的：</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 所属文件：src/apis.ts</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">opts</span><span class="token operator">:</span> FrameworkConfiguration <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 省略了其他代码...</span></span>
<span class="line">  frameworkStartedDefer<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">那这个frameworkStartedDefer到底是什么呢？</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 所属文件：src/apis.ts</span></span>
<span class="line"><span class="token keyword">const</span> frameworkStartedDefer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Deferred</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 所属文件：src/utils.ts</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Deferred</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">promise</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">  resolve<span class="token operator">!</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> PromiseLike<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line">  reject<span class="token operator">!</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">reason<span class="token operator">?</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>resolve <span class="token operator">=</span> resolve<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>reject <span class="token operator">=</span> reject<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过控制一个Promise的resolve和reject方法，来控制分属于两个不同方法中代码的执行顺序，很巧妙。在日常开发中如果有类似场景，可以借鉴。</p><p>小结 本文介绍了乾坤微应用的注册流程，并由微应用的注册流程，引出了微应用的加载流程，我们对微应用的加载流程中的一些关键的环节进行了剖析</p>`,56)])])}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/%E5%BE%AE%E5%89%8D%E7%AB%AF/qiankun/%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/2.%E5%BE%AE%E5%BA%94%E7%94%A8%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90.html","title":"2.微应用加载流程分析","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"微前端/qiankun/原理探究/2.微应用加载流程分析.md"}');export{i as comp,u as data};
