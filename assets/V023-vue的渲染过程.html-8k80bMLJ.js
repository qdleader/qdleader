import{_ as s,c as a,a as e,o as p}from"./app-D8HvJIFE.js";const t={};function l(o,n){return p(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="v023-vue的渲染过程" tabindex="-1"><a class="header-anchor" href="#v023-vue的渲染过程"><span>V023-vue的渲染过程</span></a></h1><p>调用 compile 函数,生成 render 函数字符串 ,编译过程如下:</p><p>parse 函数解析 template,生成 ast(抽象语法树) optimize 函数优化静态节点 (标记不需要每次都更新的内容,diff 算法会直接跳过静态节点,从而减少比较的过程,优化了 patch 的性能) generate 函数生成 render 函数字符串</p><p>调用 new Watcher 函数,监听数据的变化,当数据发生变化时，Render 函数执行生成 vnode 对象 调用 patch 方法,对比新旧 vnode 对象,通过 DOM diff 算法,添加、修改、删除真正的 DOM 元素</p><h2 id="_1-初始化-initialization" tabindex="-1"><a class="header-anchor" href="#_1-初始化-initialization"><span>1. 初始化（Initialization）</span></a></h2><p>在 Vue 实例被创建时，它会执行一系列的初始化操作：</p><p>数据劫持（Reactivity System）：Vue 使用 Object.defineProperty 或 Proxy（在 Vue 3 中）将数据对象转换为 getter/setter，以便在数据变化时能够触发视图更新。 事件系统（Event System）：初始化事件系统，用于处理自定义事件。 生命周期钩子（Lifecycle Hooks）：在这个过程中，Vue 会调用 beforeCreate 和 created 钩子函数。</p><h2 id="_2-模板编译-template-compilation" tabindex="-1"><a class="header-anchor" href="#_2-模板编译-template-compilation"><span>2. 模板编译（Template Compilation）</span></a></h2><p>如果 Vue 实例中存在 template 选项，Vue 会将模板编译为渲染函数（render function）。</p><p>编译（Compile）：模板字符串会被编译为渲染函数。这个过程可以在构建阶段通过 vue-loader 完成，也可以在浏览器中完成。 渲染函数（Render Function）：编译后的渲染函数将生成虚拟 DOM（VNode）。</p><h2 id="_3-虚拟-dom-virtual-dom" tabindex="-1"><a class="header-anchor" href="#_3-虚拟-dom-virtual-dom"><span>3. 虚拟 DOM（Virtual DOM）</span></a></h2><p>虚拟 DOM 是 Vue 的一个核心概念，用于描述视图的结构和内容。</p><p>创建 VNode：渲染函数会创建虚拟节点（VNode），这些节点是普通的 JavaScript 对象，描述了真实 DOM 的结构。 diff 算法：在每次数据更新时，Vue 会使用 diff 算法比较新旧 VNode，以确定需要更新的部分。</p><h2 id="_4-渲染-render" tabindex="-1"><a class="header-anchor" href="#_4-渲染-render"><span>4. 渲染（Render）</span></a></h2><p>将虚拟 DOM 渲染为真实 DOM。</p><p>初次渲染（Initial Render）：Vue 会将 VNode 转换为真实 DOM，并插入到页面中。此时会调用 beforeMount 和 mounted 生命周期钩子。 更新渲染（Update Render）：当数据发生变化时，Vue 会重新执行渲染函数生成新的 VNode，并使用 diff 算法比较新旧 VNode，计算出最小的变化，并应用到真实 DOM。此时会调用 beforeUpdate 和 updated 生命周期钩子。</p><h2 id="_5-销毁-destroy" tabindex="-1"><a class="header-anchor" href="#_5-销毁-destroy"><span>5. 销毁（Destroy）</span></a></h2><p>当 Vue 实例被销毁时，会进行清理工作。</p><p>清理事件监听器：移除所有事件监听器。 清理子组件：递归销毁所有子组件。 调用生命周期钩子：调用 beforeDestroy 和 destroyed 钩子函数。 Vue 渲染过程的简要示意图</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token number">1.</span> Initialization</span>
<span class="line">   <span class="token operator">-</span> Reactivity System</span>
<span class="line">   <span class="token operator">-</span> Event System</span>
<span class="line">   <span class="token operator">-</span> Lifecycle Hooks<span class="token operator">:</span> beforeCreate<span class="token punctuation">,</span> created</span>
<span class="line"></span>
<span class="line"><span class="token number">2.</span> Template Compilation</span>
<span class="line">   <span class="token operator">-</span> Compile Template to Render Function</span>
<span class="line">   <span class="token operator">-</span> Generate Virtual <span class="token constant">DOM</span> <span class="token punctuation">(</span>VNode<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token number">3.</span> Virtual <span class="token constant">DOM</span></span>
<span class="line">   <span class="token operator">-</span> Create VNode</span>
<span class="line">   <span class="token operator">-</span> Diff Algorithm</span>
<span class="line"></span>
<span class="line"><span class="token number">4.</span> Render</span>
<span class="line">   <span class="token operator">-</span> Initial Render</span>
<span class="line">     <span class="token operator">-</span> beforeMount<span class="token punctuation">,</span> mounted</span>
<span class="line">   <span class="token operator">-</span> Update Render</span>
<span class="line">     <span class="token operator">-</span> beforeUpdate<span class="token punctuation">,</span> updated</span>
<span class="line"></span>
<span class="line"><span class="token number">5.</span> Destroy</span>
<span class="line">   <span class="token operator">-</span> Clean up event listeners</span>
<span class="line">   <span class="token operator">-</span> Destroy child components</span>
<span class="line">   <span class="token operator">-</span> Lifecycle Hooks<span class="token operator">:</span> beforeDestroy<span class="token punctuation">,</span> destroyed</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h2><p>以下是一个简单的 Vue 实例，展示了初始化、模板编译、渲染和更新的过程：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;https://cdn.jsdelivr.net/npm/vue@2&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Hello, Vue!&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;&lt;div&gt;{{ message }}&lt;/div&gt;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Component mounted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// Simulate data update</span></span>
<span class="line">      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;Hello, World!&#39;</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Component updated&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Component before destroy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Component destroyed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个简单的示例展示了 Vue 实例的创建、模板编译为渲染函数、数据变化时的视图更新以及组件的生命周期钩子函数。</p>`,24)])])}const c=s(t,[["render",l]]),r=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/vue%E7%AF%87/V023-vue%E7%9A%84%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B.html","title":"V023-vue的渲染过程","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"前端面试/vue篇/V023-vue的渲染过程.md"}');export{c as comp,r as data};
