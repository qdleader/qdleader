import{_ as n,c as a,a as p,o as t}from"./app-D8HvJIFE.js";const o={};function e(c,s){return t(),a("div",null,[...s[0]||(s[0]=[p(`<p>使用 --esModuleInterop 支持在 CommonJs 模块下使用 import d from &#39;cjs&#39; TypeScript 之前对于 CommonJs/AMD/UMD 模块与 ES6 模块处理方式相同，这就导致了一系列的问题。</p><p>问题1 假如 foo 模块的模块规范是CommonJS/AMD/UMD 模块其中的一种，在 ts 文件中使用语句 import * as foo from &quot;foo&quot;，TypeScript 会将其等同于 const foo = require(&quot;foo&quot;)。 看起来很简单，但是它们不能确定要导入的主要对象是原语、类还是函数。ECMAScript 规范规定命名空间记录是一个普通对象，命名空间导入（上面例子中的foo）是不可调用的，尽管 TypeScript允许这样做。</p><p>问题2 假如 foo 模块的模块规范是CommonJS/AMD/UMD 模块其中的一种，在 ts 文件中使用语句 import d from &quot;foo&quot;，TypeScript 会将其等同于 const d = require(&quot;foo&quot;)。但是 CommonJS/AMD/UMD 模块至今没有一个默认导出，造成这个导入模式在非 ES 模块下不能使用。例如 import fs from &quot;fs&quot; 是不被允许的。</p><p>// 像下面这样使用基本上会报错，文件名是 index.ts</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> Koa <span class="token keyword">from</span> <span class="token string">&#39;koa&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>基于 --esModuleInterop 这两种问题都会被解决：</p><blockquote><p>命名空间导入 (即： import * as foo from &quot;foo&quot;)现在会被正确标记为不可调用，调用就会报错。 支持从 CommonJS/AMD/UMD 默认导入，并且可以正常工作。</p></blockquote><p>例子： 使用 --esModuleInterop 会生成两个辅助方法 __importStar 和 __importDefault 用于 import * 和 import default。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> foo <span class="token keyword">from</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> b <span class="token keyword">from</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> __importStar <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__importStar<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">mod</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>mod <span class="token operator">&amp;&amp;</span> mod<span class="token punctuation">.</span>__esModule<span class="token punctuation">)</span> <span class="token keyword">return</span> mod<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>mod <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> mod<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> mod<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    result<span class="token punctuation">[</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> mod<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">var</span> __importDefault <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__importDefault<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">mod</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>mod <span class="token operator">&amp;&amp;</span> mod<span class="token punctuation">.</span>__esModule<span class="token punctuation">)</span> <span class="token operator">?</span> mod <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;default&quot;</span><span class="token operator">:</span> mod <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">exports<span class="token punctuation">.</span>__esModule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">__importStar</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> bar_1 <span class="token operator">=</span> <span class="token function">__importDefault</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11)])])}const i=n(o,[["render",e]]),u=JSON.parse('{"path":"/Typescript/tsconfig%20%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E9%A1%B9%E8%AF%A6%E8%A7%A3/tsconfig.json%20-%20esModuleInterop.html","title":"","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"Typescript/tsconfig 一些配置项详解/tsconfig.json - esModuleInterop.md"}');export{i as comp,u as data};
