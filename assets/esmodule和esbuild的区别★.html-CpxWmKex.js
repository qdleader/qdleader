import{_ as e,c as a,a as n,o as l}from"./app-D8HvJIFE.js";const i={};function d(t,s){return l(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="esmodule和esbuild的区别★" tabindex="-1"><a class="header-anchor" href="#esmodule和esbuild的区别★"><span>esmodule和esbuild的区别★</span></a></h1><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">CommonJS：模块同步，如Browserify会对代码进行解析，整理出代码中的所有模块依赖关系，然后把nodejs的模块编译成浏览器可用的模块，相关的模块代码都打包在一起，形成一个完整的<span class="token constant">JS</span>文件，这个文件中不会存在 require 这类的模块化语法，变成可以在浏览器中运行的普通<span class="token constant">JS</span>，运行时加载</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token constant">ESM</span>的对外接口只是一种静态定义，为编译时加载，遇到模块加载命令<span class="token keyword">import</span>，就会生成一个只读引用。等脚本真正执行时，再根据这个只读引用，到被加载的那个模块内取值。由于<span class="token constant">ESM</span>编译时就能确定模块的依赖关系，因此能够只包含要运行的代码，可以显著减少文件体积，降低浏览器压力。</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)])])}const r=e(i,[["render",d]]),o=JSON.parse('{"path":"/vite/esmodule%E5%92%8Cesbuild%E7%9A%84%E5%8C%BA%E5%88%AB%E2%98%85.html","title":"esmodule和esbuild的区别★","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"vite/esmodule和esbuild的区别★.md"}');export{r as comp,o as data};
