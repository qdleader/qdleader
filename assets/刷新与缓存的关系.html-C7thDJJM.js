import{_ as e,c as t,a as r,o as s}from"./app-D8HvJIFE.js";const c={};function d(n,a){return s(),t("div",null,[...a[0]||(a[0]=[r('<h1 id="刷新与缓存的关系" tabindex="-1"><a class="header-anchor" href="#刷新与缓存的关系"><span>刷新与缓存的关系</span></a></h1><h2 id="正常操作" tabindex="-1"><a class="header-anchor" href="#正常操作"><span>正常操作</span></a></h2><p>强制缓存有效，协商缓存有效</p><h2 id="手动刷新-f5-和-ctrl-r-都是普通刷新" tabindex="-1"><a class="header-anchor" href="#手动刷新-f5-和-ctrl-r-都是普通刷新"><span>手动刷新（F5 和 Ctrl+R 都是普通刷新）</span></a></h2><p>强制缓存失效，协商缓存有效 若页面之前访问过，就会发一个空请求到服务器，服务器返回 302 ，表示资源未更新，可以使用浏览器缓存。</p><h2 id="强制刷新-ctrl-f5" tabindex="-1"><a class="header-anchor" href="#强制刷新-ctrl-f5"><span>强制刷新 (ctrl+F5)</span></a></h2><p>强制缓存失效，协商缓存失效 则不管浏览器是否缓存，都要重新去源站服务器请求资源，成功则返回 200。可以使用 chrome 开发工具查看具体过程，大概是这样一个流程，实际讲起来更复杂。</p>',7)])])}const l=e(c,[["render",d]]),o=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E5%B0%8Ftip/%E5%88%B7%E6%96%B0%E4%B8%8E%E7%BC%93%E5%AD%98%E7%9A%84%E5%85%B3%E7%B3%BB.html","title":"刷新与缓存的关系","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"前端小tip/刷新与缓存的关系.md"}');export{l as comp,o as data};
