import{_ as a,c as s,a as t,o as r}from"./app-D8HvJIFE.js";const p={};function n(d,e){return r(),s("div",null,[...e[0]||(e[0]=[t(`<h1 id="什么是xss" tabindex="-1"><a class="header-anchor" href="#什么是xss"><span>什么是XSS</span></a></h1><p>XSS，是跨站脚本(Cross-site scripting)的简称</p><p>XSS攻击可以分为两类：反射型和存储型，两类的划分依据是“数据存储在服务器与否”</p><h2 id="反射型xss-非持久型xss" tabindex="-1"><a class="header-anchor" href="#反射型xss-非持久型xss"><span>反射型XSS（非持久型XSS）</span></a></h2><p>又称非持久型XSS。之所以称为反射型XSS，是因为这种攻击方式的注入代码是从目标服务器通过错误信息、搜索结果等等方式“反射”回来的：发出请求时，XSS代码出现在URL中，作为输入提交到服务器端，服务器端解析后响应，XSS代码随响应内容一起传回给浏览器，最后浏览器解析执行XSS代码。这个过程像一次反射，故叫反射型XSS。 而称为非持久型XSS，则是因为这种攻击方式具有一次性，由于代码注入的是一个动态产生的页面而不是永久的页面，因此这种攻击方式只在点击链接的时候才产生作用。</p><p>攻击者通过电子邮件等方式给别人发送带有恶意脚本代码参数的 URL，当 URL 地址被打开时，注入脚本被传输到目标服务器上，然后服务器将注入脚本“反射”到受害者的浏览器上，特有的恶意代码参数被 HTML 解析、执行。</p><p>例如，将正常的网页url：</p><p>http://www.dvwa.com/vulnerabilities/xss_r/?name=index 改成下面这般便，可以实现恶意弹窗了：</p><p>http://www.dvwa.com/vulnerabilities/xss_r/?name= 如果payloda改成下面这个：</p><p>http://www.dvwa.com/vulnerabilities/xss_r/?name= 便能实现获取当前用户的cookie，这种攻击结合csrf(跨站请求伪造)，例如通过 XMLHttpRequest与CORS功能将数据发送给攻击方服务器，之后便可以在千里之外模拟用户登录，进而进行恶意操作。</p><p>这类攻击也有很多防御手段，其中一种便是利用str_replace将</p><p>更高级别的代码可能会使用preg_replace函数来过滤删除所有关于的代码，那么所有访问这个留言板的用户都将可能执行这段恶意脚本。</p><p>利用存储型XSS可实现劫持访问，盗取访问者cookie或者配合csrf攻击完成恶意请求等攻击。</p><h2 id="持久型-xss-的三大特点" tabindex="-1"><a class="header-anchor" href="#持久型-xss-的三大特点"><span>持久型 XSS 的三大特点：</span></a></h2><pre><code>①持久性，植入在数据库中；
②危害面广，甚至可以让用户机器变成 DDoS 攻击的肉鸡；
③ 盗取用户敏感私密信息。
</code></pre><h2 id="防止持久型-xss-漏洞的三大措施" tabindex="-1"><a class="header-anchor" href="#防止持久型-xss-漏洞的三大措施"><span>防止持久型 XSS 漏洞的三大措施：</span></a></h2><pre><code>①后端在入库前应该选择不相信任何前端数据，将所有的字段统一进行转义处理；
②后端在输出给前端数据统一进行转义处理；③前端在渲染页面 DOM 的时候应该选择不相信任何后端数据，任何字段都需要做转义处理。
</code></pre>`,17)])])}const o=a(p,[["render",n]]),S=JSON.parse('{"path":"/http/%E5%AE%89%E5%85%A8/%E5%A6%82%E4%BD%95%E9%A2%84%E9%98%B2XSS.html","title":"什么是XSS","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"http/安全/如何预防XSS.md"}');export{o as comp,S as data};
