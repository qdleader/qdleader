import{_ as s,c as a,a as e,o as p}from"./app-D8HvJIFE.js";const t={};function l(c,n){return p(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="will-change-使用优化动画性能" tabindex="-1"><a class="header-anchor" href="#will-change-使用优化动画性能"><span>will-change 使用优化动画性能</span></a></h1><p>will-change 属性提前通知浏览器元素即将发生的变化，使其可以提前优化资源分配。结合 transform 和 opacity 等硬件加速属性，动画性能显著提升。例如，图片悬停缩放时，通过 will-change: transform 提示浏览器提前准备 GPU 资源，减少卡顿。</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.image-container</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">will-change</span><span class="token punctuation">:</span> transform<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">transition</span><span class="token punctuation">:</span> transform 0.3s <span class="token function">cubic-bezier</span><span class="token punctuation">(</span>0.25<span class="token punctuation">,</span> 0.46<span class="token punctuation">,</span> 0.45<span class="token punctuation">,</span> 0.94<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.image-container:hover</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更改完成后删除 浏览器为即将发生的变化所做的优化通常会占用机器的很多资源，通常要删除这些优化尽快恢复到正常行为。然而，will-change 覆盖了这一行为，它维持优化的时间比浏览器所做的要长很多。 因此，你应该始终记得在元素变化完成后删除 will-change，这样浏览器就可以恢复优化所占用的资源。 如果在样式表中声明了 will-change，就不可能删除它，这就是为什么建议你用 JavaScript 设置和取消它。通过脚本，你可以向浏览器声明你的修改，然后在修改完成后，通过监听这些修改完成的时间来删除 will-change。 例如，就像我们在上一节的样式规则中所做的那样，你可以监听元素（或其祖先）何时被悬停，然后在鼠标进入时设置 will-change。如果你的元素正在被动画化，你可以使用 DOM 事件 animationEnd 来监听动画何时结束，然后在 animationEnd 被触发时移除 will-change。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 获取点击时将被动画化的元素，例如</span></span>
<span class="line"><span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;element&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 设置元素被悬停时的变化</span></span>
<span class="line">el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mouseenter&quot;</span><span class="token punctuation">,</span> hintBrowser<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;animationEnd&quot;</span><span class="token punctuation">,</span> removeHint<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">hintBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 在动画的关键帧中要改变的可优化的属性</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>willChange <span class="token operator">=</span> <span class="token string">&quot;transform, opacity&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">removeHint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>willChange <span class="token operator">=</span> <span class="token string">&quot;auto&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)])])}const o=s(t,[["render",l]]),u=JSON.parse('{"path":"/css/css%E5%B0%8F%E6%8A%80%E5%B7%A7/will-change%20%E4%BD%BF%E7%94%A8%E4%BC%98%E5%8C%96%E5%8A%A8%E7%94%BB%E6%80%A7%E8%83%BD.html","title":"will-change 使用优化动画性能","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"css/css小技巧/will-change 使用优化动画性能.md"}');export{o as comp,u as data};
