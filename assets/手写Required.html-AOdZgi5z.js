import{_ as n,c as a,a as e,o as p}from"./app-D8HvJIFE.js";const t={};function o(l,s){return p(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="手写required" tabindex="-1"><a class="header-anchor" href="#手写required"><span>手写Required</span></a></h1><p>Required 是 TypeScript 内置的一个类型操作符，它用于将某个类型的所有可选属性都转换为必选属性。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个定义使用了 TypeScript 中的映射类型（Mapped Types）和索引访问类型（Index Access Types）。 首先，声明一个泛型类型 T 作为待操作的类型。然后，使用了映射类型语法，声明一个新类型，其属性名为 P，该属性名必须是 T 的属性名之一，属性值为该属性名在 T 类型中对应的类型。并在属性名前使用 -? 符号来将所有属性设置为必选属性。 该类型操作符的作用是保证某个类型中的每个属性都必须有值，从而避免在使用该类型的地方出现意料之外的错误或者异常情况。</p><p>下面是一个使用 Required 操作符的示例：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">RequiredPerson</span> <span class="token operator">=</span> Required<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> person<span class="token operator">:</span> RequiredPerson <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Carol&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 正常</span></span>
<span class="line">person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token comment">// 正常</span></span>
<span class="line">person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 报错，因为 name 和 age 是必选属性</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的示例中，我们先声明了一个 Person 接口，然后使用 Required 操作符将其转化为必选类型 RequiredPerson，接着创建一个必选类型的变量 person，并赋初值为 { name: &quot;Alice&quot;, age: 30 }。由于 RequiredPerson 中的每个属性都是必选属性，所以我们必须设置 person 中的所有属性。如果我们忘记设置某个属性，或者设置错误的属性名，就会在编译期间发生错误，避免出现运行期错误。</p>`,7)])])}const i=n(t,[["render",o]]),r=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/TS%E7%AF%87/%E6%89%8B%E5%86%99%E7%AF%87/%E6%89%8B%E5%86%99Required.html","title":"手写Required","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"前端面试/TS篇/手写篇/手写Required.md"}');export{i as comp,r as data};
