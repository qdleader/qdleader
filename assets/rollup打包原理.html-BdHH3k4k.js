import{_ as s,c as a,a as p,o as e}from"./app-D8HvJIFE.js";const t={};function o(l,n){return e(),a("div",null,[...n[0]||(n[0]=[p(`<h1 id="rollup概念与运行原理" tabindex="-1"><a class="header-anchor" href="#rollup概念与运行原理"><span>Rollup概念与运行原理</span></a></h1><h2 id="一-概念" tabindex="-1"><a class="header-anchor" href="#一-概念"><span>一. 概念</span></a></h2><p>rollup是基于ESM的模块打包器 目前业界的许多框架都是用的rollup作为打包工具 rollup的tree-shaking能力能使打包出来的产物包尽可能的小, 可以剔除掉一些无用的代码, 对于大型的项目能够起到一定的优化作用</p><h2 id="_1-基本运行原理" tabindex="-1"><a class="header-anchor" href="#_1-基本运行原理"><span>1. 基本运行原理</span></a></h2><p>核心依赖包: MagicString: MagicString是一个非常轻量的操作包, 能够让rollup实现对无用的代码移除, 替换等等工作 acorn: 是一个轻量高性能的ast解析工具, 能够将源码进行解析以生成ast对象 基本流程 初始化变量和参数, 初始化插件 根据AST的import语句使用情况, 进行依赖分析, 生成moduleGraph 处理moduleGraph的关系, 根据scope来向上查找定义域, 通过这个方式来进行tree-shaking 将模块内容bundle到一起, 写入到目标文件</p><h2 id="打包阶段总结" tabindex="-1"><a class="header-anchor" href="#打包阶段总结"><span>打包阶段总结</span></a></h2><pre><code>其实从以上的流程我们可以总结出rollup的打包阶段的运行流了
rollup处理好入参出参等参数后, 通过bundle的build函数启动了整个的构建流程
build函数中, 会获取到入口的文件代码, 将入口文件代码内容new了一个Module对象
module对象中, 会首先使用acorn来将源代码转化成为ast, 然后使用ast/analyse来将ast中的源码与ast结构进行对应起来, 将对应位置的源码文本塞入到_source中, 这样就形成了ast与源码之前的对应关系
使用module对象中expandAllStatements, 遍历所有的声明语句, 并将声明语句的数组进行返回
调用bundle的generate方法, 通过MagicString, 将_source中的代码内容进行拼接, 最终实现打包能力
其实本质上来讲, 核心就是
参数分析 &gt; 通过依赖寻找模块 &gt; 模块转AST &gt; 进行依赖分析 &gt; 拼接输出
</code></pre><h2 id="ast" tabindex="-1"><a class="header-anchor" href="#ast"><span>AST</span></a></h2><p>Rollup打包的核心是对AST的解析和处理，要想深入理解打包原理，必须深入理解AST。 Rollup是通过acorn这个库进行AST的生成的，acorn的生成结果遵循estree规范。 下面是一个通过acorn生成的\bAST例子，来直观感受下。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> parse <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;acorn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">import { a } from &#39;./a.js&#39;</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Program&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ImportDeclaration&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">specifiers</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ImportSpecifier&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">imported</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">local</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Literal&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">raw</span><span class="token operator">:</span> <span class="token string">&#39;\\&#39;./a.js\\&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rollup 使用了 acorn 和 magic-string 两个库。为了更好的阅读 rollup 源码，必须对它们有所了解。</p><p>下面我将简单的介绍一下这两个库的作用。</p><p>acorn acorn 是一个 JavaScript 语法解析器，它将 JavaScript 字符串解析成语法抽象树 AST。</p><p>例如以下代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token punctuation">}</span></span>
<span class="line">将被解析为：</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Program&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ExportDefaultDeclaration&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-property property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-property property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-property property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;FunctionDeclaration&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string-property property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string-property property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token string-property property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token string-property property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;add&quot;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string-property property">&quot;expression&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string-property property">&quot;generator&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string-property property">&quot;params&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">                    <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token string-property property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token string-property property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span></span>
<span class="line">                    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token string-property property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token number">31</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token string-property property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string-property property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;BlockStatement&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token string-property property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token number">34</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token string-property property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token string-property property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">                        <span class="token punctuation">{</span></span>
<span class="line">                            <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ReturnStatement&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                            <span class="token string-property property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span></span>
<span class="line">                            <span class="token string-property property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token number">48</span><span class="token punctuation">,</span></span>
<span class="line">                            <span class="token string-property property">&quot;argument&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">                                <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;BinaryExpression&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token string-property property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token number">43</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token string-property property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token number">48</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token string-property property">&quot;left&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">                                    <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                                    <span class="token string-property property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token number">43</span><span class="token punctuation">,</span></span>
<span class="line">                                    <span class="token string-property property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token number">44</span><span class="token punctuation">,</span></span>
<span class="line">                                    <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span></span>
<span class="line">                                <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token string-property property">&quot;operator&quot;</span><span class="token operator">:</span> <span class="token string">&quot;+&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token string-property property">&quot;right&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">                                    <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                                    <span class="token string-property property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token number">47</span><span class="token punctuation">,</span></span>
<span class="line">                                    <span class="token string-property property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token number">48</span><span class="token punctuation">,</span></span>
<span class="line">                                    <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span></span>
<span class="line">                                <span class="token punctuation">}</span></span>
<span class="line">                            <span class="token punctuation">}</span></span>
<span class="line">                        <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token punctuation">]</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&quot;sourceType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这个 AST 的类型为 program，表明这是一个程序。body 则包含了这个程序下面所有语句对应的 AST 子节点。</p><p>每个节点都有一个 type 类型，例如 Identifier，说明这个节点是一个标识符；BlockStatement 则表明节点是块语句；ReturnStatement 则是 return 语句。</p><p>如果想了解更多详情 AST 节点的信息可以看一下这篇文章《使用 Acorn 来解析 JavaScript》。</p><h2 id="magic-string" tabindex="-1"><a class="header-anchor" href="#magic-string"><span>magic-string</span></a></h2><p>magic-string 也是 rollup 作者写的一个关于字符串操作的库。下面是 github 上的示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> MagicString <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span> <span class="token string">&#39;magic-string&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MagicString</span><span class="token punctuation">(</span> <span class="token string">&#39;problems = 99&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">overwrite</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&#39;answer&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;answer = 99&#39;</span></span>
<span class="line"></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">overwrite</span><span class="token punctuation">(</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">&#39;42&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// character indices always refer to the original string</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;answer = 42&#39;</span></span>
<span class="line"></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span> <span class="token string">&#39;var &#39;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span> <span class="token string">&#39;;&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// most methods are chainable</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;var answer = 42;&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> map <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">generateMap</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token string">&#39;source.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;converted.js.map&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">includeContent</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// generates a v3 sourcemap</span></span>
<span class="line"></span>
<span class="line"><span class="token function">require</span><span class="token punctuation">(</span> <span class="token string">&#39;fs&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span> <span class="token string">&#39;converted.js&#39;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">require</span><span class="token punctuation">(</span> <span class="token string">&#39;fs&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span> <span class="token string">&#39;converted.js.map&#39;</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从示例中可以看出来，这个库主要是对字符串一些常用方法进行了封装。这里就不多做介绍了。</p><h4 id="rollup-源码结构" tabindex="-1"><a class="header-anchor" href="#rollup-源码结构"><span>rollup 源码结构</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">│  bundle<span class="token punctuation">.</span>js <span class="token comment">// Bundle 打包器，在打包过程中会生成一个 bundle 实例，用于收集其他模块的代码，最后再将收集的代码打包到一起。</span></span>
<span class="line">│  external<span class="token operator">-</span>module<span class="token punctuation">.</span>js <span class="token comment">// ExternalModule 外部模块，例如引入了 &#39;path&#39; 模块，就会生成一个 ExternalModule 实例。</span></span>
<span class="line">│  module<span class="token punctuation">.</span>js <span class="token comment">// Module 模块，开发者自己写的代码文件，都是 module 实例。例如有 &#39;foo.js&#39; 文件，它就对应了一个 module 实例。</span></span>
<span class="line">│  rollup<span class="token punctuation">.</span>js <span class="token comment">// rollup 函数，一切的开始，调用它进行打包。</span></span>
<span class="line">│</span>
<span class="line">├─ast <span class="token comment">// ast 目录，包含了和 AST 相关的类和函数</span></span>
<span class="line">│      analyse<span class="token punctuation">.</span>js <span class="token comment">// 主要用于分析 AST 节点的作用域和依赖项。</span></span>
<span class="line">│      Scope<span class="token punctuation">.</span>js <span class="token comment">// 在分析 AST 节点时为每一个节点生成对应的 Scope 实例，主要是记录每个 AST 节点对应的作用域。</span></span>
<span class="line">│      walk<span class="token punctuation">.</span>js <span class="token comment">// walk 就是递归调用 AST 节点进行分析。</span></span>
<span class="line">│</span>
<span class="line">├─finalisers</span>
<span class="line">│      cjs<span class="token punctuation">.</span>js <span class="token comment">// 打包模式，目前只支持将代码打包成 common.js 格式</span></span>
<span class="line">│      index<span class="token punctuation">.</span>js</span>
<span class="line">│</span>
<span class="line">└─utils <span class="token comment">// 一些帮助函数</span></span>
<span class="line">        map<span class="token operator">-</span>helpers<span class="token punctuation">.</span>js</span>
<span class="line">        object<span class="token punctuation">.</span>js</span>
<span class="line">        promise<span class="token punctuation">.</span>js</span>
<span class="line">        replaceIdentifiers<span class="token punctuation">.</span>js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是初版源码的目录结构，在继续深入前，请仔细阅读上面的注释，了解一下每个文件的作用。</p><h1 id="rollup-如何打包的" tabindex="-1"><a class="header-anchor" href="#rollup-如何打包的"><span>rollup 如何打包的？</span></a></h1><p>在 rollup 中，一个文件就是一个模块。每一个模块都会根据文件的代码生成一个 AST 语法抽象树，rollup 需要对每一个 AST 节点进行分析。</p><p>分析 AST 节点，就是看看这个节点有没有调用函数或方法。如果有，就查看所调用的函数或方法是否在当前作用域，如果不在就往上找，直到找到模块顶级作用域为止。</p><p>如果本模块都没找到，说明这个函数、方法依赖于其他模块，需要从其他模块引入。</p><p>例如 import foo from &#39;./foo.js&#39;，其中 foo() 就得从 ./foo.js 文件找。</p><p>在引入 foo() 函数的过程中，如果发现 foo() 函数依赖其他模块，就会递归读取其他模块，如此循环直到没有依赖的模块为止。</p><p>最后将所有引入的代码打包在一起。</p><p>接下来我们从一个具体的示例开始，一步步分析 rollup 是如何打包的。</p><p>以下两个文件是代码文件。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// main.js</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> foo1<span class="token punctuation">,</span> foo2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// foo.js</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">下面是测试代码：</span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> rollup <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../dist/rollup&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token function">rollup</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/main.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    res<span class="token punctuation">.</span><span class="token function">wirte</span><span class="token punctuation">(</span><span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-rollup-读取-main-js-入口文件。" tabindex="-1"><a class="header-anchor" href="#_1-rollup-读取-main-js-入口文件。"><span>1. rollup 读取 main.js 入口文件。</span></a></h2><p>rollup() 首先生成一个 Bundle 实例，也就是打包器。然后根据入口文件路径去读取文件，最后根据文件内容生成一个 Module 实例。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> code</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Module</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        code<span class="token punctuation">,</span></span>
<span class="line">        path<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">bundle</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token comment">// bundle 实例</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-new-moudle-过程" tabindex="-1"><a class="header-anchor" href="#_2-new-moudle-过程"><span>2. new Moudle() 过程</span></a></h2><p>在 new 一个 Module 实例时，会调用 acorn 库的 parse() 方法将代码解析成 AST。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>ast <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">// 要解析的 JavaScript 的 ECMA 版本，这里按 ES6 解析</span></span>
<span class="line">    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">,</span> <span class="token comment">// sourceType值为 module 和 script。module 模式，可以使用 import/export 语法</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来需要对生成的 AST 进行分析。</p><p>第一步，分析导入和导出的模块，将引入的模块和导出的模块填入对应的对象。</p><p>每个 Module 实例都有一个 imports 和 exports 对象，作用是将该模块引入和导出的对象填进去，代码生成时要用到。</p><p>上述例子对应的 imports 和 exports 为：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// key 为要引入的具体对象，value 为对应的 AST 节点内容。</span></span>
<span class="line">imports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">foo1</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;foo1&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">localName</span><span class="token operator">:</span> <span class="token string">&#39;foo1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">foo2</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;foo2&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">localName</span><span class="token operator">:</span> <span class="token string">&#39;foo2&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 由于没有导出的对象，所以为空</span></span>
<span class="line">exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">第二步，分析每个 <span class="token constant">AST</span> 节点间的作用域，找出每个 <span class="token constant">AST</span> 节点定义的变量。</span>
<span class="line"></span>
<span class="line">每遍历到一个 <span class="token constant">AST</span> 节点，都会为它生成一个 Scope 实例。</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 作用域</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Scope</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> options<span class="token punctuation">.</span>parent <span class="token comment">// 父作用域</span></span>
<span class="line">		<span class="token keyword">this</span><span class="token punctuation">.</span>depth <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>depth <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span> <span class="token comment">// 作用域层级</span></span>
<span class="line">		<span class="token keyword">this</span><span class="token punctuation">.</span>names <span class="token operator">=</span> options<span class="token punctuation">.</span>params <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 作用域内的变量</span></span>
<span class="line">		<span class="token keyword">this</span><span class="token punctuation">.</span>isBlockScope <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>block <span class="token comment">// 是否块作用域</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> isBlockDeclaration</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isBlockDeclaration <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isBlockScope<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token comment">// it&#39;s a \`var\` or function declaration, and this</span></span>
<span class="line">			<span class="token comment">// is a block scope, so we need to go up</span></span>
<span class="line">			<span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> isBlockDeclaration<span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token function">contains</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findDefiningScope</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token function">findDefiningScope</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token keyword">this</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">findDefiningScope</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">		<span class="token keyword">return</span> <span class="token keyword">null</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Scope 的作用很简单，它有一个 names 属性数组，用于保存这个 AST 节点内的变量。 例如下面这段代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>打断点可以看出来，它生成的作用域对象，names 属性就会包含 a。并且因为它是模块下的一个函数，所以作用域层级为 1（模块顶级作用域为 0）。
</code></pre><p>第三步，分析标识符，并找出它们的依赖项。</p><pre><code>什么是标识符？如变量名，函数名，属性名，都归为标识符。当解析到一个标识符时，rollup 会遍历它当前的作用域，看看有没这个标识符。如果没有找到，就往它的父级作用域找。如果一直找到模块顶级作用域都没找到，就说明这个函数、方法依赖于其它模块，需要从其他模块引入。如果一个函数、方法需要被引入，就将它添加到 Module 的 _dependsOn 对象里。

例如 test() 函数中的变量 a，能在当前作用域找到，它就不是一个依赖项。foo1() 在当前模块作用域找不到，它就是一个依赖项。

打断点也能发现 Module 的 _dependsOn 属性里就有 foo1。
</code></pre><p>这就是 rollup 的 tree-shaking 原理。</p><p>rollup 不看你引入了什么函数，而是看你调用了什么函数。如果调用的函数不在此模块中，就从其它模块引入。 换句话说，如果你手动在模块顶部引入函数，但又没调用。rollup 是不会引入的。从我们的示例中可以看出，一共引入了 foo1() foo2() 两个函数，_dependsOn 里却只有 foo1()，因为引入的 foo2() 没有调用。 _dependsOn 有什么用呢？后面生成代码时会根据 _dependsOn 里的值来引入文件。</p><h2 id="_3-根据依赖项-读取对应的文件。" tabindex="-1"><a class="header-anchor" href="#_3-根据依赖项-读取对应的文件。"><span>3. 根据依赖项，读取对应的文件。</span></a></h2><p>从 _dependsOn 的值可以发现，我们需要引入 foo1() 函数。</p><p>这时第一步生成的 imports 就起作用了：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">imports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">foo1</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;foo1&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">localName</span><span class="token operator">:</span> <span class="token string">&#39;foo1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">foo2</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;foo2&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">localName</span><span class="token operator">:</span> <span class="token string">&#39;foo2&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rollup 将 foo1 当成 key，找到它对应的文件。然后读取这个文件生成一个新的 Module 实例。由于 foo.js 文件导出了两个函数，所以这个新 Module 实例的 exports 属性是这样的：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">foo1</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">node</span><span class="token operator">:</span> Node <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ExportNamedDeclaration&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">declaration</span><span class="token operator">:</span> <span class="token punctuation">[</span>Node<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">specifiers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token keyword">null</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">localName</span><span class="token operator">:</span> <span class="token string">&#39;foo1&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">expression</span><span class="token operator">:</span> Node <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;FunctionDeclaration&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">[</span>Node<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">expression</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">[</span>Node<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">foo2</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">node</span><span class="token operator">:</span> Node <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ExportNamedDeclaration&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">52</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">declaration</span><span class="token operator">:</span> <span class="token punctuation">[</span>Node<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">specifiers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token keyword">null</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">localName</span><span class="token operator">:</span> <span class="token string">&#39;foo2&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">expression</span><span class="token operator">:</span> Node <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;FunctionDeclaration&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">34</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">52</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">[</span>Node<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">expression</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">[</span>Node<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时，就会用 main.js 要导入的 foo1 当成 key 去匹配 foo.js 的 exports 对象。如果匹配成功，就把 foo1() 函数对应的 AST 节点提取出来，放到 Bundle 中。如果匹配失败，就会报错，提示 foo.js 没有导出这个函数。</p><h2 id="_4-生成代码。" tabindex="-1"><a class="header-anchor" href="#_4-生成代码。"><span>4. 生成代码。</span></a></h2><p>由于已经引入了所有的函数。这时需要调用 Bundle 的 generate() 方法生成代码。</p><p>同时，在打包过程中，还需要对引入的函数做一些额外的操作。</p><p>移除额外代码</p><p>例如从 foo.js 中引入的 foo1() 函数代码是这样的：export function foo1() {}。rollup 会移除掉 export ，变成 function foo1() {}。因为它们就要打包在一起了，所以就不需要 export 了。</p><p>重命名</p><p>例如两个模块中都有一个同名函数 foo()，打包到一起时，会对其中一个函数重命名，变成 _foo()，以避免冲突。</p><p>好了，回到正文。</p><p>还记得文章一开始提到的 magic-string 库吗？在 generate() 中，会将每个 AST 节点对应的源代码添加到 magic-string 实例中：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">magicString<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">content</span><span class="token operator">:</span> source<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">separator</span><span class="token operator">:</span> newLines</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">这个操作本质上相当于拼字符串：</span>
<span class="line"></span>
<span class="line">str <span class="token operator">+=</span> <span class="token string">&#39;这个操作相当于将每个 AST 的源代码当成字符串拼在一起，就像现在这样&#39;</span></span>
<span class="line">最后将拼在一起的代码返回。</span>
<span class="line"></span>
<span class="line"><span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">code</span><span class="token operator">:</span> magicString<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这就已经结束了，如果你想把代码生成文件，可以调用 write() 方法生成文件：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">rollup</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/main.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    res<span class="token punctuation">.</span><span class="token function">wirte</span><span class="token punctuation">(</span><span class="token string">&#39;dist.js&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法是写在 rollup() 函数里的。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">rollup</span><span class="token punctuation">(</span><span class="token parameter">entry<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">{</span> entry<span class="token punctuation">,</span> <span class="token operator">...</span>options <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> bundle<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function-variable function">generate</span><span class="token operator">:</span> <span class="token parameter">options</span> <span class="token operator">=&gt;</span> bundle<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token function">wirte</span><span class="token punctuation">(</span><span class="token parameter">dest<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">const</span> <span class="token punctuation">{</span> code <span class="token punctuation">}</span> <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">					dest<span class="token punctuation">,</span></span>
<span class="line">					<span class="token literal-property property">format</span><span class="token operator">:</span> options<span class="token punctuation">.</span>format<span class="token punctuation">,</span></span>
<span class="line">				<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">				<span class="token keyword">return</span> fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err</span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,75)])])}const i=s(t,[["render",o]]),r=JSON.parse('{"path":"/rollup/rollup%E6%89%93%E5%8C%85%E5%8E%9F%E7%90%86.html","title":"Rollup概念与运行原理","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"rollup/rollup打包原理.md"}');export{i as comp,r as data};
