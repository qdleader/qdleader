import{_ as e,c as t,a as o,e as l,b as n,r as c,o as i}from"./app-D8HvJIFE.js";const r={};function u(a,s){const p=c("CountTo");return i(),t("div",null,[s[0]||(s[0]=o(`<p>一、前言 我还是推荐两个好用的数字滚动插件countup.js和vue-count-to（<em>vue-count-to是参考countup.js的</em>）给大家使用</p><h2 id="countup-js" tabindex="-1"><a class="header-anchor" href="#countup-js"><span>countup.js</span></a></h2><p>countUp.js 是一款独立，轻量级的 javascript 类，它能快速的创建各种有趣的数值动画效果，而且每次绑定的数字变化，可以去调用start方法，让数字重新滚动，这看上去不就酷炫多了。</p><p>1、如何下载 去官网下载 https://github.com/inorganik/countUp.js</p><pre><code> 直接 npm i countup.js
</code></pre><p>2、 相关参数 下载之后，使用前我们先简单了解一下countup.js的相关参数，如下</p><p>param1: target(dom对象或者一个能获取到dom的字符串，也叫目标对象) *必须 * param2: startVal（动画起始的值如24.02）*必选 * param3: endVal (动画结束的值如94.62) *必选 * param4: decimals(指定小数位数，默认为0，既没有小数) *可选 * param5: duration(整个动画运动的总时间，默认为2s) *可选 * param6: options(用来修改默认的配置项) *可选 *</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">options <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">useEasing</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否使用缓动动画，默认为缓动，可以设置为false让其匀速</span></span>
<span class="line">        <span class="token literal-property property">useGrouping</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 对数字进行分组，如12345，按三位一组变为类似123,45这样的</span></span>
<span class="line">        <span class="token literal-property property">separator</span><span class="token operator">:</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 分组时使用的分隔符默认是逗号，</span></span>
<span class="line">        <span class="token literal-property property">decimal</span><span class="token operator">:</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 小数点</span></span>
<span class="line">        <span class="token literal-property property">easingFn</span><span class="token operator">:</span> easeOutExpo<span class="token punctuation">,</span> <span class="token comment">// 缓动动画的函数</span></span>
<span class="line">        <span class="token literal-property property">formattingFn</span><span class="token operator">:</span> formatNumber<span class="token punctuation">,</span> <span class="token comment">// 格式化数字如12345，格式化为123，45</span></span>
<span class="line">        <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 添加前缀如12345，变为￥12345</span></span>
<span class="line">        <span class="token literal-property property">suffix</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 添加后缀如12345 通过添加后缀变为12345$，12345元之类的</span></span>
<span class="line">        <span class="token literal-property property">numerals</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 用来做替换操作，一般用不到，默认为空就是不用他</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、如何在项目中使用 a、 直接在文件中引入</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CountUp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;countup.js&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>b、生成一个dom，并赋值ref，这种可以通过ref获取该dom元素</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&lt;</span>span ref<span class="token operator">=</span><span class="token string">&quot;countup1&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;count-up-num&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> data<span class="token punctuation">.</span>etcFlow <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>c、撰写滚动数字函数，在每次更新数据之后，调用该函数。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 滚动数字函数</span></span>
<span class="line"><span class="token function">initCountup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">const</span> conutOptions1 <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">decimal</span><span class="token operator">:</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">suffix</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">decimalPlaces</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 四个参数分别为，dom，开始值和结束值，配置项</span></span>
<span class="line">  <span class="token keyword">const</span> demo1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountUp</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>countup1<span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>endCount1<span class="token punctuation">,</span> <span class="token comment">// 结束值</span></span>
<span class="line">    conutOptions1 </span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">// 创建完就可以开始调用start()让数字滚动起来啦</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>demo1<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    demo1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo1<span class="token punctuation">.</span>error<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有个缺点就是，一旦需要滚动的元素过多，需要对每一个元素都new CountUp一下，并且进行调用start()函数，写法不够精炼。</p><h2 id="三、vue-count-to" tabindex="-1"><a class="header-anchor" href="#三、vue-count-to"><span>三、vue-count-to</span></a></h2><p>vue-count-to的实现是通过参考countup.js的，所以属性参数上大同小异，vue-count-to是将配置项抽取了出来，可以直接在标签上进行配置，更加直观快捷，也更符合vue双向绑定的编码习惯。废话不多说，来看看怎么使用吧。</p><p>1、如何下载 直接在npm安装到项目中</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"> npm install vue<span class="token operator">-</span>count<span class="token operator">-</span>to</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2、相关配置参数 属性 描述 类型 默认值 statrVal 开始值 Number 0 endVal 结束值 Number 2017 duration 持续时间，单位毫秒 Number 3000 autoplay 自动播放，true的时候，如果开始值or结束值发生变化，会自动调用start()函数，来让数据滚动 Boolean true decimals 小数位 Number 0 decimal 十进制分割 String . separator 分隔符 String , prefix 前缀符（如数字123，设置‘￥’，则显示为￥123） String &#39;&#39; suffix 后缀符 String &#39;&#39; useEasing 使用缓和功能 Boolean true easingFn 缓和回调 Function - 可以看到，vue-count-to属性比countup.js少了一些，但已经把常用的核心部分属性抽了出来，并且额外增加了一个autoplay的属性，方便双向绑定的使用，而不用每次更新数据自己去调用start()方法。</p><p>3、相关功能函数 函数名 描述 mountedCallback 挂载以后返回回调 start 开始计数 pause 暂停计数 reset 重置countTo 4、如何在项目中使用 a、引入，这里是作为组件引入，而不是引入函数方法</p><p>import CountTo from &#39;vue-count-to&#39; export default { components: { CountTo }, } 复制代码 b、使用CountTo生成元素</p><p>// 这里是绑定了开始和结束值，持续时间2秒，小数位2</p>`,23)),l(p,{ref:"refcountofore","start-val":a.startVal,"end-val":a.endVal,duration:2e3,decimals:2},null,8,["start-val","end-val"]),s[1]||(s[1]=n("p",null,"复制代码 到这里就实现了滚动效果，是不是比countup.js的实现过程简单得多，而且简洁明了。",-1)),s[2]||(s[2]=n("p",null,"c、设置ref的目的",-1)),s[3]||(s[3]=n("p",null,"有时数值并没有改变，但为了造成数据是有更新的情况，就仍需要有滚动的效果出现，这个时候可以通过ref找到该元素，然后调用方法滚动。",-1)),s[4]||(s[4]=n("p",null,"const refname = 'refcountofore' if (this.$refs[refname]) { // 判空 this.$refs[refname].reset() // 重置 this.$refs[refname].start() // 开始滚动 }",-1))])}const m=e(r,[["render",u]]),k=JSON.parse('{"path":"/%E5%A5%BD%E7%8E%A9%E7%9A%84%E7%BB%84%E4%BB%B6/%E6%95%B0%E5%AD%97%E6%BB%9A%E5%8A%A8%E7%BB%84%E4%BB%B6.html","title":"","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"好玩的组件/数字滚动组件.md"}');export{m as comp,k as data};
