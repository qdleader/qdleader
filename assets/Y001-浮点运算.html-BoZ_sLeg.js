import{_ as s,c as a,a as n,o as t}from"./app-D8HvJIFE.js";const l={};function i(r,e){return t(),a("div",null,[...e[0]||(e[0]=[n(`<h1 id="y001-浮点运算" tabindex="-1"><a class="header-anchor" href="#y001-浮点运算"><span>Y001-浮点运算</span></a></h1><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token number">0.1</span><span class="token operator">+</span><span class="token number">0.2</span> <span class="token operator">===</span> <span class="token number">0.3</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// =&gt; ???</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>#答案： false</p><p>#解析： 0.1 + 0.2 = 0.30000000000000004</p><blockquote><p>由于以二进制方式对浮点数进行编码，因此向浮点数相加之类的操作会产生舍入误差。</p></blockquote><p>因此0.1 + 0.2 === 0.3 是false</p><p>在两数相加时，会先转换成二进制，0.1 和 0.2 转换成二进制的时候尾数会发生无限循环，然后进行对阶运算，JS 引擎对二进制进行截断，所以造成精度丢失。</p><p>1.进制转换 0.1和0.2转换成二进制后会无限循环</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">0.1 -&gt; 0.0001100110011001...(无限循环)</span>
<span class="line">0.2 -&gt; 0.0011001100110011...(无限循环)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以总结：<b>精度丢失可能出现在进制转换和对阶运算中</b></p><p>这里还有一个小知识点 那为什么 x=0.1 能得到 0.1？ 这是因为这个 0.1 并不是真正的0.1。这不是废话吗？别急，听我解释 标准中规定尾数f的固定长度是52位，再加上省略的一位，这53位是JS精度范围。它最大可以表示2^53(9007199254740992), 长度是 16，所以可以使用 toPrecision(16) 来做精度运算，超过的精度会自动做凑整处理 0.10000000000000000555.toPrecision(16) // 返回 0.1000000000000000，去掉末尾的零后正好为 0.1</p><p>// 但来一个更高的精度： 0.1.toPrecision(21) = 0.100000000000000005551 复制代码这个就是为什么0.1可以等于0.1的原因</p>`,12)])])}const c=s(l,[["render",i]]),d=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/js%E7%B1%BB/%E8%BF%90%E7%AE%97%E7%B1%BB/Y001-%E6%B5%AE%E7%82%B9%E8%BF%90%E7%AE%97.html","title":"Y001-浮点运算","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"前端面试/js类/运算类/Y001-浮点运算.md"}');export{c as comp,d as data};
