import{_ as l,c as a,a as d,o}from"./app-D8HvJIFE.js";const i={};function c(t,e){return o(),a("div",null,[...e[0]||(e[0]=[d('<h1 id="claude-code-常用命令" tabindex="-1"><a class="header-anchor" href="#claude-code-常用命令"><span>Claude Code 常用命令</span></a></h1><p>常用参数 --dangerously-skip-permissions：跳过权限询问，直接开干！适合那些你确定以及肯定的操作，效率嗖嗖的。 --continue：继续上次的会话，就像给 Claude Code 接上“断片”前的记忆，无缝衔接，继续嗨！</p><p>启动后，这些指令就是你的“魔法棒”，指哪打哪！</p><ul><li>/memory：直接编辑 Claude Code 的记忆，或者通过 # 命令追加记忆。这就像给 AI 灌输“内功心法”，让它更懂你。</li><li>/mcp：查看当前 MCP 工作状态，确保你的“外挂”都在正常运转。</li><li>/compact：压缩上下文，避免信息过载。当上下文达到 95% 时会自动启动，但主动管理更靠谱。</li><li>/clean：清除上下文，给 Claude Code 来个“大脑清理”，保持环境整洁。</li><li>/resume：查看历史记录，回顾你们的“合作历程”。</li></ul><p>安装 ccusage 扩展工具，实时查看模型使用量！ ccusage blocks --live</p><p>使用 /init 指令，Claude Code 会扫描整个工程，了解项目结构，并将结果写入 CLAUDE.md 文件。这文件就是 Claude Code 的“记忆宫殿”，执行任务时它会优先参考这里的内容。</p><p>CLAUDE.md 里应该放什么？</p><ol><li>项目背景：让 AI 知道这是个什么项目，目标是什么。</li><li>技术栈：用的什么框架、什么语言，让 AI 有个“技术底”。</li><li>架构设计：项目的架构思路，让 AI 明白“大局观”。</li><li>编码标准：代码怎么写，规范是什么，让 AI 知道“规矩”。</li><li>工作流程：怎么操作，怎么协作，让 AI 明白“流程”。</li></ol><p>上下文管理策略</p><ul><li>定期使用 /compact 命令：上下文容易超出限制，需要主动压缩，否则模型可能遗忘早期重要信息。</li><li>及时更新 README.md 和 CLAUDE.md：将其作为上下文存储的补充，让 AI 随时掌握最新情况。</li><li>任务结束后，使用 /clean 清除上下文：保持环境整洁，避免“信息垃圾”堆积。</li></ul>',10)])])}const m=l(i,[["render",c]]),u=JSON.parse('{"path":"/tool/claudeCode/Claude%20Code%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html","title":"Claude Code 常用命令","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"tool/claudeCode/Claude Code 常用命令.md"}');export{m as comp,u as data};
