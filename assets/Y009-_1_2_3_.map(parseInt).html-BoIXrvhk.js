import{_ as e,c as t,a as r,o as s}from"./app-D8HvJIFE.js";const n={};function p(d,a){return s(),t("div",null,[...a[0]||(a[0]=[r('<h1 id="y009-1-2-3-map-parseint" tabindex="-1"><a class="header-anchor" href="#y009-1-2-3-map-parseint"><span>Y009-[1,2,3].map(parseInt)</span></a></h1><h2 id="_1-2-3-map-parseint" tabindex="-1"><a class="header-anchor" href="#_1-2-3-map-parseint"><span>[1,2,3].map(parseInt)</span></a></h2><p>先说结果：[1, NaN, NaN]</p><p>为什么会是这个结果</p><h4 id="_1-map函数" tabindex="-1"><a class="header-anchor" href="#_1-map函数"><span>1. map函数</span></a></h4><p>将数组的每个元素传递给指定的函数处理，并返回处理后的数组，所以 [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;].map(parseInt) 就是将字符串1，2，3作为元素；0，1，2作为下标分别调用 parseInt 函数。即分别求出 parseInt(&#39;1&#39;,0), parseInt(&#39;2&#39;,1), parseInt(&#39;3&#39;,2)的结果。</p><h4 id="_2-parseint函数-重点" tabindex="-1"><a class="header-anchor" href="#_2-parseint函数-重点"><span>2. parseInt函数（重点）</span></a></h4><p>概念：以第二个参数为基数来解析第一个参数字符串，通常用来做十进制的向上取整（省略小数）如：parseInt(2.7) //结果为2 特点：接收两个参数parseInt(string,radix) string：字母（大小写均可）、数组、特殊字符（不可放在开头,特殊字符及特殊字符后面的内容不做解析）的任意字符串，如 &#39;2&#39;、&#39;2w&#39;、&#39;2!&#39;</p><h3 id="radix-解析字符串的基数-基数规则如下" tabindex="-1"><a class="header-anchor" href="#radix-解析字符串的基数-基数规则如下"><span>radix：解析字符串的基数，基数规则如下：</span></a></h3><p>1） 区间范围介于2~36之间； 2 ） 当参数为 0，parseInt() 会根据十进制来解析； 3 ） 如果忽略该参数，默认的基数规则： 如果 string 以 &quot;0x&quot; 开头，parseInt() 会把 string 的其余部分解析为十六进制的整数；parseInt(&quot;0xf&quot;) //15 如果 string 以 0 开头，其后的字符解析为八进制或十六进制的数字；parseInt(&quot;08&quot;) //8 如果 string 以 1 ~ 9 的数字开头，parseInt() 将把它解析为十进制的整数；parseInt(&quot;88.99f&quot;) //88 只有字符串中的第一个数字会被返回。parseInt(&quot;10.33&quot;) //返回10； 开头和结尾的空格是允许的。parseInt(&quot; 69 10 &quot;) //返回69 如果字符串的第一个字符不能被转换为数字，返回 NaN。parseInt(&quot;f&quot;) //返回NaN 而parseInt(&quot;f&quot;，16) //返回15</p><h3 id="三、再来分析一下结果" tabindex="-1"><a class="header-anchor" href="#三、再来分析一下结果"><span>三、再来分析一下结果</span></a></h3><p>[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;].map(parseInt)即 parseInt(&#39;1&#39;,0);radix 为 0，parseInt() 会根据十进制来解析，所以结果为 1； parseInt(&#39;2&#39;,1);radix 为 1，超出区间范围，所以结果为 NaN； parseInt(&#39;3&#39;,2);radix 为 2，用2进制来解析，应以 0 和 1 开头，所以结果为 NaN。</p><h5 id="四、parseint方法解析的运算过程" tabindex="-1"><a class="header-anchor" href="#四、parseint方法解析的运算过程"><span>四、parseInt方法解析的运算过程</span></a></h5><p>parseInt(&#39;101.55&#39;,10); //以十进制解析，运算过程：向上取整数(不做四舍五入，省略小数)，结果为 101。 parseInt(&#39;101&#39;,2); //以二进制解析，运算过程：1<em>2的2次方+0</em>2的1次方+1<em>2的0次方=4+0+1=5，结果为 5。 parseInt(&#39;101&#39;,8); //以八进制解析，运算过程：1</em>8的2次方+0<em>8的1次方+1</em>8的0次方=64+0+1=65，结果为 65。 parseInt(&#39;101&#39;,16); //以十六进制解析，运算过程：1<em>16的2次方+0</em>16的1次方+1*16的0次方=256+0+1=257，结果为 257。</p>',14)])])}const o=e(n,[["render",p]]),h=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/js%E7%B1%BB/%E8%BF%90%E7%AE%97%E7%B1%BB/Y009-_1_2_3_.map(parseInt).html","title":"Y009-[1,2,3].map(parseInt)","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"前端面试/js类/运算类/Y009-[1,2,3].map(parseInt).md"}');export{o as comp,h as data};
