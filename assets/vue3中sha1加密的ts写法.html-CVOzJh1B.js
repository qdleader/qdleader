import{_ as s,c as a,a as p,o as t}from"./app-D8HvJIFE.js";const e={};function o(c,n){return t(),a("div",null,[...n[0]||(n[0]=[p(`<h1 id="vue3中sha1加密的ts写法" tabindex="-1"><a class="header-anchor" href="#vue3中sha1加密的ts写法"><span>vue3中sha1加密的ts写法</span></a></h1><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> hexcase <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">/* hex output format. 0 - lowercase; 1 - uppercase        */</span></span>
<span class="line"><span class="token comment">// const b64pad = &quot;&quot;; /* base-64 pad character. &quot;=&quot; for strict RFC compliance   */</span></span>
<span class="line"><span class="token keyword">const</span> chrsz <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token comment">/* bits per input character. 8 - ASCII; 16 - Unicode      */</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// let binb2hex;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// function b64_sha1(s: string): string { return binb2b64(coreSha1(str2binb(s), s.length * chrsz)); }</span></span>
<span class="line"><span class="token comment">// function str_sha1(s: string): string { return binb2str(coreSha1(str2binb(s), s.length * chrsz)); }</span></span>
<span class="line"><span class="token comment">// function hex_hmac_sha1(key: string, data: string): string { return binb2hex(core_hmac_sha1(key, data)); }</span></span>
<span class="line"><span class="token comment">// function b64_hmac_sha1(key: string, data: string): string { return binb2b64(core_hmac_sha1(key, data)); }</span></span>
<span class="line"><span class="token comment">// function str_hmac_sha1(key: string, data: string): string { return binb2str(core_hmac_sha1(key, data)); }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Perform a simple self-test to see if the VM is working</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// function sha1_vm_test(): boolean {</span></span>
<span class="line"><span class="token comment">//     return hex_sha1(&quot;abc&quot;) == &quot;a9993e364706816aba3e25717850c26c9cd0d89d&quot;;</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Calculate the SHA-1 of an array of big-endian words, and a bit length</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">rol</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">num</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">cnt</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;&lt;</span> cnt<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> cnt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">safeAdd</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> lsw <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> msw <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>lsw <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>msw <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>lsw <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sha1Ft</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">t</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">return</span> b <span class="token operator">^</span> c <span class="token operator">^</span> d<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>c <span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> b <span class="token operator">^</span> c <span class="token operator">^</span> d<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Determine the appropriate additive constant for the current iteration</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sha1Kt</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">t</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1518500249</span> <span class="token operator">:</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1859775393</span> <span class="token operator">:</span></span>
<span class="line">        <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1894007588</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">899497514</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">coreSha1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">len</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* append padding */</span></span>
<span class="line">    x<span class="token punctuation">[</span>len <span class="token operator">&gt;&gt;</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">0x80</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">-</span> len <span class="token operator">%</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    x<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">64</span> <span class="token operator">&gt;&gt;</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> w <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1732584193</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">271733879</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1732584194</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token number">271733878</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1009589776</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> olda <span class="token operator">=</span> a<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> oldb <span class="token operator">=</span> b<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> oldc <span class="token operator">=</span> c<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> oldd <span class="token operator">=</span> d<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> olde <span class="token operator">=</span> e<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">else</span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rol</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> w<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">^</span> w<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">^</span> w<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">safeAdd</span><span class="token punctuation">(</span><span class="token function">safeAdd</span><span class="token punctuation">(</span><span class="token function">rol</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sha1Ft</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token function">safeAdd</span><span class="token punctuation">(</span><span class="token function">safeAdd</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sha1Kt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            e <span class="token operator">=</span> d<span class="token punctuation">;</span></span>
<span class="line">            d <span class="token operator">=</span> c<span class="token punctuation">;</span></span>
<span class="line">            c <span class="token operator">=</span> <span class="token function">rol</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            b <span class="token operator">=</span> a<span class="token punctuation">;</span></span>
<span class="line">            a <span class="token operator">=</span> t<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        a <span class="token operator">=</span> <span class="token function">safeAdd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> olda<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        b <span class="token operator">=</span> <span class="token function">safeAdd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> oldb<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        c <span class="token operator">=</span> <span class="token function">safeAdd</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> oldc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        d <span class="token operator">=</span> <span class="token function">safeAdd</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> oldd<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        e <span class="token operator">=</span> <span class="token function">safeAdd</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> olde<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Perform the appropriate tripconst combination function for the current</span>
<span class="line"> * iteration</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Calculate the HMAC-SHA1 of a key and some data</span>
<span class="line"> */</span></span>
<span class="line"><span class="token comment">// function core_hmac_sha1(key: string, data: string): number[] {</span></span>
<span class="line"><span class="token comment">//     let bkey = str2binb(key);</span></span>
<span class="line"><span class="token comment">//     if (bkey.length &gt; 16) bkey = coreSha1(bkey, key.length * chrsz);</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//     const ipad = Array(16), opad = Array(16);</span></span>
<span class="line"><span class="token comment">//     for (const i = 0; i &lt; 16; i++) {</span></span>
<span class="line"><span class="token comment">//         ipad[i] = bkey[i] ^ 0x36363636;</span></span>
<span class="line"><span class="token comment">//         opad[i] = bkey[i] ^ 0x5C5C5C5C;</span></span>
<span class="line"><span class="token comment">//     }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//     const hash = coreSha1(ipad.concat(str2binb(data)), 512 + data.length * chrsz);</span></span>
<span class="line"><span class="token comment">//     return coreSha1(opad.concat(hash), 512 + 160);</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Add integers, wrapping at 2^32. This uses 16-bit operations internally</span>
<span class="line"> * to work around bugs in some JS interpreters.</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Bitwise rotate a 32-bit number to the left.</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Convert an 8-bit or 16-bit string to an array of big-endian words</span>
<span class="line"> * In 8-bit function, characters &gt;255 have their hi-byte silently ignored.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">str2binb</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token literal-property property">bin</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> chrsz<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length <span class="token operator">*</span> chrsz<span class="token punctuation">;</span> i <span class="token operator">+=</span> chrsz<span class="token punctuation">)</span></span>
<span class="line">        bin<span class="token punctuation">[</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i <span class="token operator">/</span> chrsz<span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> chrsz <span class="token operator">-</span> i <span class="token operator">%</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> bin<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Convert an array of big-endian words to a string</span>
<span class="line"> */</span></span>
<span class="line"><span class="token comment">// function binb2str(bin: number[]): string {</span></span>
<span class="line"><span class="token comment">//     const str = &quot;&quot;;</span></span>
<span class="line"><span class="token comment">//     const mask = (1 &lt;&lt; chrsz) - 1;</span></span>
<span class="line"><span class="token comment">//     for (const i = 0; i &lt; bin.length * 32; i += chrsz)</span></span>
<span class="line"><span class="token comment">//         str += String.fromCharCode((bin[i &gt;&gt; 5] &gt;&gt;&gt; (32 - chrsz - i % 32)) &amp; mask);</span></span>
<span class="line"><span class="token comment">//     return str;</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Convert an array of big-endian words to a hex string.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">binb2hex</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">binarray</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> hexTab <span class="token operator">=</span> hexcase <span class="token operator">?</span> <span class="token string">&quot;0123456789ABCDEF&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;0123456789abcdef&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> binarray<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        str <span class="token operator">+=</span> hexTab<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>binarray<span class="token punctuation">[</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> i <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">        hexTab<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>binarray<span class="token punctuation">[</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> i <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> str<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Convert an array of big-endian words to a base-64 string</span>
<span class="line"> */</span></span>
<span class="line"><span class="token comment">// function binb2b64(binarray: number[]): string {</span></span>
<span class="line"><span class="token comment">//     const tab = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;;</span></span>
<span class="line"><span class="token comment">//     const str = &quot;&quot;;</span></span>
<span class="line"><span class="token comment">//     for (const i = 0; i &lt; binarray.length * 4; i += 3) {</span></span>
<span class="line"><span class="token comment">//         const tripconst = (((binarray[i &gt;&gt; 2] &gt;&gt; 8 * (3 - i % 4)) &amp; 0xFF) &lt;&lt; 16)</span></span>
<span class="line"><span class="token comment">//             | (((binarray[i + 1 &gt;&gt; 2] &gt;&gt; 8 * (3 - (i + 1) % 4)) &amp; 0xFF) &lt;&lt; 8)</span></span>
<span class="line"><span class="token comment">//             | ((binarray[i + 2 &gt;&gt; 2] &gt;&gt; 8 * (3 - (i + 2) % 4)) &amp; 0xFF);</span></span>
<span class="line"><span class="token comment">//         for (const j = 0; j &lt; 4; j++) {</span></span>
<span class="line"><span class="token comment">//             if (i * 8 + j * 6 &gt; binarray.length * 32) str += b64pad;</span></span>
<span class="line"><span class="token comment">//             else str += tab.charAt((tripconst &gt;&gt; 6 * (3 - j)) &amp; 0x3F);</span></span>
<span class="line"><span class="token comment">//         }</span></span>
<span class="line"><span class="token comment">//     }</span></span>
<span class="line"><span class="token comment">//     return str;</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">hexSha1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">s</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">binb2hex</span><span class="token punctuation">(</span><span class="token function">coreSha1</span><span class="token punctuation">(</span><span class="token function">str2binb</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>length <span class="token operator">*</span> chrsz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">hexSha2</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">s</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">binb2hex</span><span class="token punctuation">(</span><span class="token function">coreSha1</span><span class="token punctuation">(</span><span class="token function">str2binb</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>length <span class="token operator">*</span> chrsz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 字符串加密成 hex 字符串</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)])])}const i=s(e,[["render",o]]),r=JSON.parse('{"path":"/vue3/vue3%E4%B8%ADsha1%E5%8A%A0%E5%AF%86%E7%9A%84ts%E5%86%99%E6%B3%95.html","title":"vue3中sha1加密的ts写法","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"vue3/vue3中sha1加密的ts写法.md"}');export{i as comp,r as data};
