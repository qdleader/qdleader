import{_ as n,c as a,a as e,o as p}from"./app-D8HvJIFE.js";const t={};function l(o,s){return p(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="比enum-更好的方式" tabindex="-1"><a class="header-anchor" href="#比enum-更好的方式"><span>比enum 更好的方式</span></a></h1><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 以前的写法 - enum</span></span>
<span class="line"><span class="token keyword">enum</span> UserRole <span class="token punctuation">{</span></span>
<span class="line">  Admin <span class="token operator">=</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  User <span class="token operator">=</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  Guest <span class="token operator">=</span> <span class="token string">&#39;guest&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// ...后面还有十来个角色</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用的时候</span></span>
<span class="line"><span class="token keyword">const</span> role <span class="token operator">=</span> UserRole<span class="token punctuation">.</span>Admin</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看起来很正常对不对？但你知道编译成JavaScript后发生了什么吗？</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 编译后的代码</span></span>
<span class="line"><span class="token keyword">var</span> UserRole<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">UserRole</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    UserRole<span class="token punctuation">[</span><span class="token string">&quot;Admin&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    UserRole<span class="token punctuation">[</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    UserRole<span class="token punctuation">[</span><span class="token string">&quot;Guest&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;guest&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// ...每个值都会生成对应的代码</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>UserRole <span class="token operator">||</span> <span class="token punctuation">(</span>UserRole <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个enum都会变成一个立即执行函数，项目里enum越多，生成的代码就越多，打包体积自然就膨胀了</p><h2 id="新的解决方案-常量对象-类型别名" tabindex="-1"><a class="header-anchor" href="#新的解决方案-常量对象-类型别名"><span>新的解决方案：常量对象 + 类型别名</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 新写法 - 常量对象</span></span>
<span class="line"><span class="token keyword">const</span> UserRole <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">Admin</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">User</span><span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">Guest</span><span class="token operator">:</span> <span class="token string">&#39;guest&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span>  <span class="token comment">// as const很重要，让TypeScript知道这是只读的</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 类型别名 - 相当于枚举的类型！</span></span>
<span class="line">type UserRole <span class="token operator">=</span> keyof <span class="token keyword">typeof</span> UserRole</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用时的方式完全一样！</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">role</span><span class="token operator">:</span> UserRole <span class="token operator">=</span> UserRole<span class="token punctuation">.</span>Admin</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后发生了什么？</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 编译后的代码 - 简洁多了！</span></span>
<span class="line"><span class="token keyword">const</span> UserRole <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">Admin</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">User</span><span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">Guest</span><span class="token operator">:</span> <span class="token string">&#39;guest&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><pre><code>用const obj = { ... } as const代替enum
用type Key = keyof typeof obj定义类型
打包体积能小很多，构建速度也更快，代码更简洁
</code></pre><p>数字枚举需要稍作调整：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> StatusCode <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">Ok</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">NotFound</span><span class="token operator">:</span> <span class="token number">404</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span></span>
<span class="line">type StatusCode <span class="token operator">=</span> <span class="token keyword">typeof</span> StatusCode<span class="token punctuation">[</span>keyof <span class="token keyword">typeof</span> StatusCode<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要反向映射（根据值找键），需要自己写工具函数：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">getKeyByValue</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">obj</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15)])])}const i=n(t,[["render",l]]),r=JSON.parse('{"path":"/Typescript/%E8%BF%9B%E9%98%B6/%E6%AF%94emnu%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%86%99%E6%96%B9%E5%BC%8F.html","title":"比enum 更好的方式","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"Typescript/进阶/比emnu更好的写方式.md"}');export{i as comp,r as data};
