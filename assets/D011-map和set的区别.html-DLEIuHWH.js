import{_ as s,c as a,a as e,o as p}from"./app-D8HvJIFE.js";const t={};function c(l,n){return p(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="d011-map和set的区别" tabindex="-1"><a class="header-anchor" href="#d011-map和set的区别"><span>D011-map和set的区别</span></a></h1><p>Set 和 Map 主要的应用场景在于 数据重组 和 数据储存。</p><p>Set 是一种叫做集合的数据结构，Map 是一种叫做字典的数据结构。 集合 与 字典 的区别：</p><p>共同点：集合、字典 可以储存不重复的值 不同点：集合 是以 [value, value]的形式储存元素，字典 是以 [key, value] 的形式储存 集合（Set）： ES6 新增的一种新的数据结构，类似于数组，成员唯一（内部元素没有重复的值）。且使用键对数据排序即顺序存储。</p><p>Set 本身是一种构造函数，用来生成 Set 数据结构。</p><p>Set 对象允许你储存任何类型的唯一值，无论是原始值或者是对象引用。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>	<span class="token comment">// 1 2 3 4</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 去重数组的重复对象</span></span>
<span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token operator">...</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>	<span class="token comment">// [1, 2, 3]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：向 Set 加入值的时候，不会发生类型转换，所以5和&quot;5&quot;是两个不同的值。Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，它类似于精确相等运算符（===），主要的区别是<strong>NaN等于自身，而精确相等运算符认为NaN不等于自身。</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span></span>
<span class="line">set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">set</span> <span class="token comment">// Set {NaN}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;5&#39;</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set1<span class="token punctuation">]</span><span class="token punctuation">)</span>	<span class="token comment">// [5, &quot;5&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作方法：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>：新增，相当于 array里的push。</span>
<span class="line"><span class="token keyword">delete</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>：存在即删除集合中value。</span>
<span class="line"><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>：判断集合中是否存在 value。</span>
<span class="line"><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：清空集合。</span>
<span class="line">便利方法：遍历方法（遍历顺序为插入顺序）</span>
<span class="line"></span>
<span class="line"><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回一个包含集合中所有键的迭代器。</span>
<span class="line"><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回一个包含集合中所有值得迭代器。</span>
<span class="line"><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回一个包含Set对象中所有元素得键值对迭代器。</span>
<span class="line"><span class="token function">forEach</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span>：用于对集合成员执行callbackFn操作，如果提供了 thisArg 参数，回调中的<span class="token keyword">this</span>会是这个参数，没有返回值。</span>
<span class="line">WeakSet：</span>
<span class="line">WeakSet 对象允许你将弱引用对象储存在一个集合中。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>WeakSet 与 Set 的区别：</p><p>WeakSet 只能储存对象引用，不能存放值，而 Set 对象都可以。 WeakSet 对象中储存的对象值都是被弱引用的，即垃圾回收机制不考虑 WeakSet 对该对象的应用，如果没有其他的变量或属性引用这个对象值，则这个对象将会被垃圾回收掉（不考虑该对象还存在于 WeakSet 中），所以，WeakSet 对象里有多少个成员元素，取决于垃圾回收机制有没有运行，运行前后成员个数可能不一致，遍历结束之后，有的成员可能取不到了（被垃圾回收了），WeakSet 对象是无法被遍历的（ES6 规定 WeakSet 不可遍历），也没有办法拿到它包含的所有元素。 方法：</p><p>add(value)：在WeakSet 对象中添加一个元素value。 has(value)：判断 WeakSet 对象中是否包含value。 delete(value)：删除元素 value。 字典（Map）： 是一组键值对的结构，具有极快的查找速度。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token string">&#39;haha&#39;</span><span class="token punctuation">}</span></span>
<span class="line">m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">&#39;content&#39;</span><span class="token punctuation">)</span></span>
<span class="line">m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>	<span class="token comment">// content</span></span>
<span class="line"></span>
<span class="line">m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>	<span class="token comment">// true</span></span>
<span class="line">m<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>	<span class="token comment">// true</span></span>
<span class="line">m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>	<span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="操作方法" tabindex="-1"><a class="header-anchor" href="#操作方法"><span>操作方法：</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>：向字典中添加新元素。</span>
<span class="line"><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>：通过键查找特定的数值并返回。</span>
<span class="line"><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>：判断字典中是否存在键key。</span>
<span class="line"><span class="token keyword">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>：通过键 key 从字典中移除对应的数据。</span>
<span class="line"><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：将这个字典中的所有元素删除。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="遍历方法" tabindex="-1"><a class="header-anchor" href="#遍历方法"><span>遍历方法：</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">Keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：将字典中包含的所有键名以迭代器形式返回。</span>
<span class="line"><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：将字典中包含的所有数值以迭代器形式返回。</span>
<span class="line"><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回所有成员的迭代器。</span>
<span class="line"><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：遍历字典的所有成员。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="weakmap" tabindex="-1"><a class="header-anchor" href="#weakmap"><span>WeakMap：</span></a></h2><p>WeakMap 对象是一组键值对的集合，其中的键是弱引用对象，而值可以是任意。</p><p>注意，WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。</p><p>WeakMap 中，每个键对自己所引用对象的引用都是弱引用，在没有其他引用和该键引用同一对象，这个对象将会被垃圾回收（相应的key则变成无效的），所以，WeakMap 的 key 是不可枚举的。</p><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法：</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>：判断是否有 key 关联对象。</span>
<span class="line"><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>：返回key关联对象（没有则则返回 <span class="token keyword">undefined</span>）。</span>
<span class="line"><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>：设置一组key关联对象。</span>
<span class="line"><span class="token keyword">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>：移除 key 的关联对象。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结：</span></a></h2><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>Set：</span></a></h3><p>成员唯一、无序且不重复。 [value, value]，键值与键名是一致的（或者说只有键值，没有键名）。 可以遍历，方法有：add、delete、has。</p><h3 id="weakset" tabindex="-1"><a class="header-anchor" href="#weakset"><span>WeakSet：</span></a></h3><p>成员都是对象。 成员都是弱引用，可以被垃圾回收机制回收，可以用来保存DOM节点，不容易造成内存泄漏。 不能遍历，方法有add、delete、has。</p><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map：</span></a></h3><p>本质上是键值对的集合，类似集合。 可以遍历，方法很多可以跟各种数据格式转换。</p><h3 id="weakmap-1" tabindex="-1"><a class="header-anchor" href="#weakmap-1"><span>WeakMap：</span></a></h3><p>只接受对象作为键名（null除外），不接受其他类型的值作为键名。 键名是弱引用，键值可以是任意的，键名所指向的对象可以被垃圾回收，此时键名是无效的。 不能遍历，方法有get、set、has、delete。</p>`,34)])])}const i=s(t,[["render",c]]),u=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/js%E7%B1%BB/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B2%BE%E9%80%89%E6%B1%87%E6%80%BB/D011-map%E5%92%8Cset%E7%9A%84%E5%8C%BA%E5%88%AB.html","title":"D011-map和set的区别","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"前端面试/js类/常见面试题精选汇总/D011-map和set的区别.md"}');export{i as comp,u as data};
