import{_ as n,c as a,a as e,o as l}from"./app-D8HvJIFE.js";const p={};function i(c,s){return l(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="枚举和常量枚举的区别" tabindex="-1"><a class="header-anchor" href="#枚举和常量枚举的区别"><span>枚举和常量枚举的区别</span></a></h1><h2 id="枚举和常量枚举的区别-1" tabindex="-1"><a class="header-anchor" href="#枚举和常量枚举的区别-1"><span>枚举和常量枚举的区别</span></a></h2><p>枚举和常量枚举（const枚举）：使用枚举可以清晰地表达意图或创建一组有区别的用例</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 枚举</span></span>
<span class="line"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span> Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue <span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 常量枚举</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">enum</span> Color <span class="token punctuation">{</span> Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="两者的区别" tabindex="-1"><a class="header-anchor" href="#两者的区别"><span>两者的区别：</span></a></h2><p>枚举会被编译时会编译成一个对象，可以被当作对象使用</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 枚举</span></span>
<span class="line"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span></span>
<span class="line">  Red<span class="token punctuation">,</span></span>
<span class="line">  Green<span class="token punctuation">,</span></span>
<span class="line">  Blue</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">var</span> sisterAn <span class="token operator">=</span> Color<span class="token punctuation">.</span>Red</span>
<span class="line"><span class="token comment">// 会被编译成 JavaScript 中的 var sisterAn = Color.Red</span></span>
<span class="line"><span class="token comment">// 即在运行执行时，它将会查找变量 Color 和 Color.Red</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>const 枚举会在 typescript 编译期间被删除，const 枚举成员在使用的地方会被内联进来，避免额外的性能开销</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 常量枚举</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">enum</span> Color <span class="token punctuation">{</span></span>
<span class="line">  Red<span class="token punctuation">,</span></span>
<span class="line">  Green<span class="token punctuation">,</span></span>
<span class="line">  Blue</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">var</span> sisterAn <span class="token operator">=</span> Color<span class="token punctuation">.</span>Red</span>
<span class="line"><span class="token comment">// 会被编译成 JavaScript 中的 var sisterAn = 0</span></span>
<span class="line"><span class="token comment">// 在运行时已经没有 Color 变量</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由此可见，使用 常量枚举 会有更好的性能。</p><p>定义的枚举，在经过编译器编译后是一个对象，这个对象我们可以在程序运行时使用，前面有说到。但有时定义枚举可能只是为了让程序可读性更好，而不需要编译后的代码，即不需要编译成对象。typescript中考虑到这种情况，所以加入了 const enum (完全嵌入的枚举)。</p>`,11)])])}const o=n(p,[["render",i]]),r=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/TS%E7%AF%87/%E6%9E%9A%E4%B8%BE%E5%92%8C%E5%B8%B8%E9%87%8F%E6%9E%9A%E4%B8%BE%E7%9A%84%E5%8C%BA%E5%88%AB.html","title":"枚举和常量枚举的区别","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"前端面试/TS篇/枚举和常量枚举的区别.md"}');export{o as comp,r as data};
