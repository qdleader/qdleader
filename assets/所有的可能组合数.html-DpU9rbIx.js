import{_ as s,c as a,a as p,o as t}from"./app-D8HvJIFE.js";const e={};function c(o,n){return t(),a("div",null,[...n[0]||(n[0]=[p(`<h1 id="所有的可能组合数" tabindex="-1"><a class="header-anchor" href="#所有的可能组合数"><span>所有的可能组合数</span></a></h1><h2 id="请设计一个-combinations-函数-它接收一个数字数组-要求返回这些数字的所有可能组合情况。" tabindex="-1"><a class="header-anchor" href="#请设计一个-combinations-函数-它接收一个数字数组-要求返回这些数字的所有可能组合情况。"><span>请设计一个 combinations 函数，它接收一个数字数组，要求返回这些数字的所有可能组合情况。</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"> <span class="token keyword">function</span> <span class="token function">combinations</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	 <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line">	 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		 <span class="token keyword">let</span> len <span class="token operator">=</span> result<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">		 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			 result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">		 <span class="token punctuation">}</span></span>
<span class="line">	 <span class="token punctuation">}</span></span>
<span class="line">	 <span class="token keyword">return</span> result</span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token function">combinations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展"><span>拓展</span></a></h2><p>给定一个数，和一个数组，返回所有可能的组合情况，要求组合中数字之和等于给定的数。</p><p>方法一用上面的方法后，再进行便利求和，等于这个数的拿出来即可。</p><h2 id="方法2" tabindex="-1"><a class="header-anchor" href="#方法2"><span>方法2</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"> <span class="token keyword">function</span> <span class="token function">findCombinations</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	 <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">	 <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span>path<span class="token punctuation">,</span>sum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		 <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			 res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">			 <span class="token keyword">return</span> </span>
<span class="line">		 <span class="token punctuation">}</span></span>
<span class="line">		 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			 <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span>  target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				 path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">				  <span class="token function">inner</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>path<span class="token punctuation">,</span>sum <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">				  path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">			 <span class="token punctuation">}</span></span>
<span class="line">		 <span class="token punctuation">}</span></span>
<span class="line">	 <span class="token punctuation">}</span></span>
<span class="line">	 <span class="token function">inner</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">	 <span class="token keyword">return</span> res</span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"> <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">let</span> combinations <span class="token operator">=</span> <span class="token function">findCombinations</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>combinations<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)])])}const i=s(e,[["render",c]]),u=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/js%E7%B1%BB/%E6%89%8B%E5%86%99%E7%B1%BB/%E5%8F%AF%E9%81%87%E5%88%B0%E7%9A%84/%E6%89%80%E6%9C%89%E7%9A%84%E5%8F%AF%E8%83%BD%E7%BB%84%E5%90%88%E6%95%B0.html","title":"所有的可能组合数","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"前端面试/js类/手写类/可遇到的/所有的可能组合数.md"}');export{i as comp,u as data};
