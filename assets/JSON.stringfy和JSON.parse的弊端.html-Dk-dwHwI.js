import{_ as s,c as a,a as e,o as t}from"./app-D8HvJIFE.js";const p={};function o(c,n){return t(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="json-stringfy和json-parse的弊端" tabindex="-1"><a class="header-anchor" href="#json-stringfy和json-parse的弊端"><span>JSON.stringfy和JSON.parse的弊端</span></a></h1><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h2><h3 id="_1-如果obj里面有时间对象-则json-stringify后再json-parse的结果-时间将只是字符串的形式-而不是对象的形式" tabindex="-1"><a class="header-anchor" href="#_1-如果obj里面有时间对象-则json-stringify后再json-parse的结果-时间将只是字符串的形式-而不是对象的形式"><span>1.如果obj里面有时间对象，则JSON.stringify后再JSON.parse的结果，时间将只是字符串的形式，而不是对象的形式</span></a></h3><h3 id="_2-如果obj里有函数-undefined-则序列化的结果会把函数或-undefined丢失" tabindex="-1"><a class="header-anchor" href="#_2-如果obj里有函数-undefined-则序列化的结果会把函数或-undefined丢失"><span>2.如果obj里有函数，undefined，则序列化的结果会把函数或 undefined丢失；</span></a></h3><h3 id="_3-如果被拷贝的对象中有正则表达式-则拷贝之后的对象正则表达式会变成object" tabindex="-1"><a class="header-anchor" href="#_3-如果被拷贝的对象中有正则表达式-则拷贝之后的对象正则表达式会变成object"><span>3.如果被拷贝的对象中有正则表达式，则拷贝之后的对象正则表达式会变成Object</span></a></h3><h3 id="_4、json-stringify-只能序列化对象的可枚举的自有属性-例如-如果obj中的对象是有构造函数生成的-则使用json-parse-json-stringify-obj-深拷贝后-会丢弃对象的constructor-会抛弃对象的constructor-所有的构造函数会指向object" tabindex="-1"><a class="header-anchor" href="#_4、json-stringify-只能序列化对象的可枚举的自有属性-例如-如果obj中的对象是有构造函数生成的-则使用json-parse-json-stringify-obj-深拷贝后-会丢弃对象的constructor-会抛弃对象的constructor-所有的构造函数会指向object"><span>4、JSON.stringify()只能序列化对象的可枚举的自有属性，例如 如果obj中的对象是有构造函数生成的， 则使用JSON.parse(JSON.stringify(obj))深拷贝后，会丢弃对象的constructor； 会抛弃对象的constructor,所有的构造函数会指向Object</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function-variable function">eg</span><span class="token operator">:</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> liai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;liai&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">date</span><span class="token operator">:</span> liai<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// debugger</span></span>
<span class="line">  <span class="token keyword">const</span> copyed <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  test<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;ddd&#39;</span><span class="token punctuation">,</span> test<span class="token punctuation">,</span> copyed<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)])])}const l=s(p,[["render",o]]),r=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/js%E7%B1%BB/%E5%85%B6%E4%BB%96%E7%B1%BB/JSON.stringfy%E5%92%8CJSON.parse%E7%9A%84%E5%BC%8A%E7%AB%AF.html","title":"JSON.stringfy和JSON.parse的弊端","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"前端面试/js类/其他类/JSON.stringfy和JSON.parse的弊端.md"}');export{l as comp,r as data};
