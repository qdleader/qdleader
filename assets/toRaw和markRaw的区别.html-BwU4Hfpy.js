import{_ as s,c as a,a as p,o as e}from"./app-D8HvJIFE.js";const t={};function c(o,n){return e(),a("div",null,[...n[0]||(n[0]=[p(`<h1 id="toraw和markraw的区别" tabindex="-1"><a class="header-anchor" href="#toraw和markraw的区别"><span>toRaw和markRaw的区别</span></a></h1><p>在Vue 3中，toRaw和markRaw是两个用于处理响应式数据的方法，但它们有不同的用途和使用场景。以下是它们的详细解释和区别：</p><h2 id="toraw" tabindex="-1"><a class="header-anchor" href="#toraw"><span>toRaw</span></a></h2><p>toRaw用于获取一个响应式对象的原始（非响应式）版本。这对于调试或在某些情况下需要直接操作原始对象的数据时非常有用。</p><h3 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法：</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> toRaw <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toRaw</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出原始对象：{ count: 0 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用途" tabindex="-1"><a class="header-anchor" href="#用途"><span>用途：</span></a></h3><blockquote><p>获取原始对象：在某些情况下，你可能需要直接访问或操作原始对象的数据，而不是响应式代理对象。 调试：在调试时，查看原始对象可以帮助你更清楚地理解数据的结构和状态。</p></blockquote><h2 id="markraw" tabindex="-1"><a class="header-anchor" href="#markraw"><span>markRaw</span></a></h2><p>markRaw用于标记一个对象，使其在Vue的响应式系统中被忽略。被标记为“raw”的对象将不会被转换为响应式对象。</p><h3 id="用法-1" tabindex="-1"><a class="header-anchor" href="#用法-1"><span>用法：</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> markRaw <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> rawObject <span class="token operator">=</span> <span class="token function">markRaw</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">raw</span><span class="token operator">:</span> rawObject</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出原始对象：{ foo: &#39;bar&#39; }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用途-1" tabindex="-1"><a class="header-anchor" href="#用途-1"><span>用途：</span></a></h3><blockquote><p>性能优化：对于不需要响应式特性的对象，可以使用markRaw来避免不必要的性能开销。 第三方库集成：在集成一些不需要响应式特性或可能与Vue的响应式系统产生冲突的第三方库时，使用markRaw可以避免潜在的问题。</p></blockquote><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h2><p>功能不同：</p><blockquote><p>toRaw：用于获取响应式对象的原始版本。 markRaw：用于标记对象，使其在Vue的响应式系统中被忽略。 使用场景不同：</p></blockquote><blockquote><p>toRaw：在需要访问或操作原始对象数据时使用，主要用于调试和特定情况下的直接数据操作。 markRaw：在不需要响应式特性的对象时使用，主要用于性能优化和第三方库集成。</p></blockquote><p>行为不同：</p><p><strong>toRaw：不会改变对象本身，只是返回原始对象。</strong><strong>markRaw：改变对象，使其在未来的Vue响应式处理过程中被忽略。</strong></p><p>示例</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> toRaw<span class="token punctuation">,</span> markRaw <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用 toRaw</span></span>
<span class="line"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">nested</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">42</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> rawState <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rawState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { count: 0, nested: { value: 42 } }</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rawState <span class="token operator">===</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false, toRaw 返回的是原始对象</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用 markRaw</span></span>
<span class="line"><span class="token keyword">const</span> rawObject <span class="token operator">=</span> <span class="token function">markRaw</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> reactiveState <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">raw</span><span class="token operator">:</span> rawObject</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reactiveState<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { foo: &#39;bar&#39; }</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reactiveState<span class="token punctuation">.</span>raw <span class="token operator">===</span> rawObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, rawObject 被标记为 raw，不会被响应式处理</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22)])])}const i=s(t,[["render",c]]),r=JSON.parse('{"path":"/vue3/%E5%9F%BA%E7%A1%80%E7%B1%BB/toRaw%E5%92%8CmarkRaw%E7%9A%84%E5%8C%BA%E5%88%AB.html","title":"toRaw和markRaw的区别","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"vue3/基础类/toRaw和markRaw的区别.md"}');export{i as comp,r as data};
