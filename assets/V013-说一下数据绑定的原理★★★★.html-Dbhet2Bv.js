import{_ as s,c as a,a as e,o as p}from"./app-D8HvJIFE.js";const t={};function c(l,n){return p(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="简述数据绑定的原理" tabindex="-1"><a class="header-anchor" href="#简述数据绑定的原理"><span>简述数据绑定的原理</span></a></h1><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">Object<span class="token punctuation">.</span>defineProperty 可以检测到属性的变化。一旦数据发生访问或修改时候，通过数据劫持，我们就可以检测到，</span>
<span class="line"></span>
<span class="line">到底层检测到数据变化的时候，就会通过发布订阅者模式通知更新dom</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vue 的响应式原理是 Vue.js 框架的核心机制，它使得数据变化能够自动更新视图。其核心是利用 JavaScript 的 Object.defineProperty（Vue 2.x）或 Proxy（Vue 3.x）来实现数据劫持，结合发布-订阅模式，在数据变化时通知依赖进行更新。 下面分别对 Vue 2 和 Vue 3 的响应式原理进行说明：</p><h3 id="vue-2-x-响应式原理" tabindex="-1"><a class="header-anchor" href="#vue-2-x-响应式原理"><span>Vue 2.x 响应式原理</span></a></h3><ol><li><strong>数据劫持（Data Observation）</strong>： <ul><li>Vue 2 使用<code>Object.defineProperty</code>来劫持对象属性的 getter 和 setter。</li><li>遍历数据对象的所有属性，将其转换为 getter/setter 形式，从而在读取和设置时可以执行自定义操作。</li></ul></li><li><strong>依赖收集（Dependency Collection）</strong>： <ul><li>在 getter 中收集依赖（Watcher）。每个组件实例对应一个 Watcher，Watcher 会在组件渲染过程中“接触”用到的数据属性，从而触发 getter，将 Watcher 添加到当前属性的依赖列表中。</li><li>每个属性都有一个 Dep（依赖管理器）实例，用于存储所有依赖于该属性的 Watcher。</li></ul></li><li><strong>派发更新（Dispatching Updates）</strong>： <ul><li>当数据发生变化时，触发 setter，调用 Dep 的 notify 方法，通知所有依赖的 Watcher 进行更新。</li><li>Watcher 更新会触发组件的重新渲染（重新执行 render 函数生成虚拟 DOM，然后进行 patch 更新真实 DOM）。</li></ul></li><li><strong>数组处理</strong>： <ul><li>由于<code>Object.defineProperty</code>无法监听数组索引的变化，Vue 2 通过重写数组的 7 个变更方法（push, pop, shift, unshift, splice, sort, reverse）来实现响应式。这些方法被重写，在调用时会触发更新。</li></ul></li><li><strong>缺点</strong>： <ul><li>无法检测对象属性的添加或删除（需要使用<code>Vue.set</code>或<code>Vue.delete</code>）。</li><li>数组的索引直接设置（如<code>arr[index]=newValue</code>）和修改数组长度无法检测。</li><li>深度监听需要递归遍历整个对象，性能负担较大。</li></ul></li></ol><h3 id="vue-3-x-响应式原理" tabindex="-1"><a class="header-anchor" href="#vue-3-x-响应式原理"><span>Vue 3.x 响应式原理</span></a></h3><p>Vue 3 使用 ES6 的 Proxy 代替了<code>Object.defineProperty</code>，解决了 Vue 2 的一些限制。</p><ol><li><strong>Proxy 代理</strong>： <ul><li>Proxy 可以拦截整个对象，包括属性的读取、设置、删除、方法调用等，不需要遍历每个属性。</li><li>对于数组，Proxy 可以监听索引变化和<code>length</code>变化。</li></ul></li><li><strong>Reflect</strong>： <ul><li>通常与 Proxy 配合使用，用于操作目标对象。</li></ul></li><li><strong>响应式 API</strong>： <ul><li><code>reactive</code>：创建响应式对象（使用 Proxy）。</li><li><code>ref</code>：创建基本类型的响应式数据（内部也是用 reactive 包装为对象）。</li><li><code>effect</code>：副作用函数，类似于 Vue 2 的 Watcher，当依赖的响应式数据变化时，effect 会重新执行。</li></ul></li><li><strong>依赖收集与触发更新</strong>： <ul><li>在 Proxy 的 get 拦截中收集依赖（track 函数）。</li><li>在 set、deleteProperty 等拦截中触发更新（trigger 函数）。</li><li>依赖管理采用 WeakMap（target -&gt; Map（key -&gt; Set(effects)））的数据结构，可以更精确地管理依赖。</li></ul></li><li><strong>优势</strong>： <ul><li>可以检测对象属性的添加和删除，不需要特殊 API。</li><li>支持数组索引和长度的直接修改。</li><li>性能更好：惰性收集，不需要一开始就递归整个对象（按需收集）。</li><li>支持 Map、Set 等新的集合类型。</li></ul></li></ol><h3 id="响应式原理的流程图-vue-3-为例" tabindex="-1"><a class="header-anchor" href="#响应式原理的流程图-vue-3-为例"><span>响应式原理的流程图（Vue 3 为例）</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">初始化响应式数据（reactive/ref） → 用Proxy代理对象</span>
<span class="line">                                   │</span>
<span class="line">读取数据（触发get） → 依赖收集（track） → 将当前activeEffect（副作用）添加到依赖集合中</span>
<span class="line">                                   │</span>
<span class="line">修改数据（触发set） → 依赖触发（trigger） → 从依赖集合中取出所有effect并执行</span>
<span class="line">                                   │</span>
<span class="line">                                   → 组件更新/副作用函数重新执行</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例代码-vue-3-响应式模拟" tabindex="-1"><a class="header-anchor" href="#示例代码-vue-3-响应式模拟"><span>示例代码（Vue 3 响应式模拟）</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 简单的Vue3响应式模拟</span></span>
<span class="line"><span class="token keyword">let</span> activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> depsMap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue <span class="token operator">!==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  activeEffect <span class="token operator">=</span> fn<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行一次，触发依赖收集</span></span>
<span class="line">  activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 使用示例</span></span>
<span class="line"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">count is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 触发更新，输出: count is: 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li>Vue 2：通过<code>Object.defineProperty</code>劫持数据，需要递归遍历对象，对数组有特殊处理。使用 Dep 和 Watcher 进行依赖管理。</li><li>Vue 3：使用 Proxy 和 Reflect，可以拦截更多操作，无需递归初始化，性能更好，支持更多数据类型。依赖管理采用 WeakMap、Map、Set 的数据结构。 Vue 的响应式系统是其数据驱动视图的核心，理解其原理有助于更好地使用 Vue 和进行性能优化。</li></ul>`,14)])])}const i=s(t,[["render",c]]),u=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/vue%E7%AF%87/V013-%E8%AF%B4%E4%B8%80%E4%B8%8B%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E7%9A%84%E5%8E%9F%E7%90%86%E2%98%85%E2%98%85%E2%98%85%E2%98%85.html","title":"简述数据绑定的原理","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"前端面试/vue篇/V013-说一下数据绑定的原理★★★★.md"}');export{i as comp,u as data};
