import{_ as a,c as n,a as e,o as t}from"./app-D8HvJIFE.js";const p={};function o(c,s){return t(),n("div",null,[...s[0]||(s[0]=[e(`<h1 id="手写exclude" tabindex="-1"><a class="header-anchor" href="#手写exclude"><span>手写Exclude</span></a></h1><p>Exclude 是 TypeScript 的一种类型操作符，用于从类型 T 中排除掉指定的类型 K。其定义为：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">K</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个定义中，使用了 TypeScript 的条件类型，它主要的义务是允许我们在类型系统中进行运算和推断。 具体来说，在这个条件类型中，我们首先声明了一个泛型类型参数 T 和 K。然后，使用了 extends 关键字将 T 与 K 进行对比。如果 T 是 K 的子类型，则返回 never 类型；否则返回 T 类型。 为什么要返回 never 呢？因为 never 代表的是永远不可能出现的类型，相当于一个空集合。这样，在使用 Exclude 操作符时，我们就可以将 T 中与 K 相同的类型排除掉，从而得到一个新的类型。 例如，假设我们有以下两个类型：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;b&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;c&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;d&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;e&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用 Exclude 操作符将 B 中包含的类型从 A 中排除掉，得到一个新的类型 C：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;a&quot; | &quot;c&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>因为 A 中包含了四个类型，而 B 中包含了 &quot;b&quot; 和 &quot;d&quot;，所以将这两个类型从 A 中排除后，剩余的类型就是 &quot;a&quot; 和 &quot;c&quot;。因此，新的类型 C 就是 &quot;a&quot; 或者 &quot;c&quot;</p>`,8)])])}const r=a(p,[["render",o]]),i=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/TS%E7%AF%87/%E6%89%8B%E5%86%99%E7%AF%87/%E6%89%8B%E5%86%99Exclude.html","title":"手写Exclude","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761877037000,"contributors":[{"name":"qdleader","username":"qdleader","email":"yk4545945@163.com","commits":1,"url":"https://github.com/qdleader"}],"changelog":[{"hash":"bd7640b59685e94edda53b9f6d34fbec27933dd4","time":1761877037000,"email":"yk4545945@163.com","author":"qdleader","message":"docs: 更新仓库链接和添加交流社区信息"}]},"filePathRelative":"前端面试/TS篇/手写篇/手写Exclude.md"}');export{r as comp,i as data};
